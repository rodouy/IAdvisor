@model IrrigationAdvisor.ViewModels.Security.CreateUserViewModel

<link href="~/css/wizard.css" rel="stylesheet" />

<link href="~/css/library/bootstrap.min.css" rel="stylesheet" />
<script src="~/js/bootstrap.min.js"></script>
<script src="~/Scripts/jquery-2.1.4.min.js"></script>


<link href="../dist/jquery.wizard.css" rel="stylesheet">


<script js>
    var bg = bg || false;
    if (!bg) {
        if (typeof jQuery != 'undefined') {
            bg = jQuery;
        } else if (typeof angular != 'undefined') {
            bg = angular.element;

            (function () {
                bg.extend = angular.extend;
                bg.isFunction = angular.isFunction;

                bg.prototype.is = function (selector) {
                    for (var i = 0; i < this.length; i++) {
                        var el = this[i];
                        if ((el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector)) return true;
                    }
                    return false;
                }

                bg.prototype.find = function (selector) {
                    var context = this[0], matches = [];
                    // Early return if context is not an element or document
                    if (!context || (context.nodeType !== 1 && context.nodeType !== 9) || typeof selector != 'string') {
                        return [];
                    }

                    for (var i = 0; i < this.length; i++) {
                        var elm = this[i],
                        nodes = bg(elm.querySelectorAll(selector));
                        matches.push.apply(matches, nodes.slice());
                    }

                    return bg(matches);
                };

                bg.prototype.outerWidth = function () {
                    var el = this[0];
                    if (typeof el == 'undefined') return null;
                    return el.offsetWidth;
                };

                bg.prototype.width = function () {
                    var el = this[0];
                    if (typeof el == 'undefined') return null;
                    var computedStyle = getComputedStyle(el);
                    var width = el.offsetWidth;
                    if (computedStyle)
                        width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
                    return width;
                };

            })();
        }
    }


    ; (function ($, document, window) {

        "use strict";

        var pluginName = "wizardByGiro",
        // the name of using in .data()
        dataPlugin = "plugin_" + pluginName,
        defaults = {
            currentStep: 0,
            checkStep: false,
            onCompleted: false,
            bottomButtons: true,
            topButtons: true,
            autoSubmit: false,
            keyboard: false,
            btnClass: 'btn',
            btnClassDefault: 'btn-default',
            btnClassCompleted: 'btn-success',
            text: {
                finished: 'Enviar',
                next: 'Siguiente',
                previous: 'Anterior'
            }
        },

        attachEventsHandler = function () {
            var that = this,
            opts = this.options;

            that.$element.find('.btn-next, .btn-prev').on('click', function (e) {
                if ($(this).attr('disabled') || $(this).hasClass('disabled') || !$(this).is(':visible')) return;

                var type = $(this).hasClass('btn-next') ? 'next' : 'previous';
                e.stopPropagation();
                that[type].call(that, true, e);
            });

            that.$element.find('.steps > li').on('click', function (e) {
                e.stopPropagation();
                var step = $(this).attr('data-step'),
                isCompleted = $(this).hasClass('completed');
                if (!isCompleted) return true;

                that.setStep.call(that, step, e);
            });

            $(document).on('keydown', function (e) {
                if (!that.$element.is(':visible')) return;

                // arrow left
                if (e.ctrlKey && e.keyCode == 37) {
                    e.stopPropagation();
                    e.preventDefault();
                    that.previous.call(that, true, e);
                }

                // arrow right
                if (e.ctrlKey && e.keyCode == 39) {
                    e.stopPropagation();
                    e.preventDefault();
                    that.next.call(that, true, e);
                }
            });

        },

        checkStatus = function () {
            var that = this,
                currentWidth,
                stepsWidth = 0,
                stepPosition = false,
                steps = that.$element.find('.steps'),
                stepsItems = that.$element.find('.steps > li'),
                opts = that.options;

            if (!this.currentStep) this.currentStep = 1;

            stepsItems.removeClass('active');
            that.$element
                .find('.steps > li[data-step="' + that.currentStep + '"]')
                .addClass('active');

            that.$element.find('.steps-content .step-pane').removeClass('active');
            var current = that.$element.find('.steps-content .step-pane[data-step="' + that.currentStep + '"]');
            current.addClass('active');

            for (var i = 0; i < stepsItems.length; i++) {
                var stepLi = $(stepsItems[i]);
                if (that.currentStep > (i + 1)) {
                    stepLi.addClass('completed');
                } else {
                    stepLi.removeClass('completed');
                }

                currentWidth = stepLi.outerWidth();
                if (!stepPosition && stepLi.hasClass('active')) {
                    stepPosition = stepsWidth + (currentWidth / 2);
                }

                stepsWidth += currentWidth;
            }



            // set buttons based on current step
            that.$element.find('.btn-next').removeClass('final-step ' + opts.btnClassCompleted).addClass(opts.btnClassDefault);
            that.$element.find('.btn-prev').removeClass('disabled hidden');
            if (that.currentStep == stepsItems.length) {
                // we are in the last step
                that.$element.find('.btn-next').removeClass(opts.btnClassDefault).addClass('final-step ' + opts.btnClassCompleted);
            } else if (that.currentStep == 1) {
                that.$element.find('.btn-prev').addClass('disabled hidden');
            }

            // move steps view if needed
            var totalWidth = that.$element.width() - that.$element.find('.actions').outerWidth();

            if (stepsWidth < totalWidth) return;

            var offsetDiff = stepPosition - (totalWidth / 2);
            if (offsetDiff > 0) {
                // move it forward
                steps.css('left', -offsetDiff);
            } else {
                // move it backward
                steps.css('left', 0);
            }
        },



        moveStep = function (step, direction, event, checkStep) {
            var that = this, canMove = true,
            steps = that.$element.find('.steps > li'),
            triggerEnd = false;

            checkStep = checkStep === false ? false : true;

            /////////////////////////////////////////////
            canMove = customValidation(that.currentStep, direction);
            /////////////////////////////////////////////

            // check we can move
            if (checkStep && typeof that.options.checkStep == 'function') {
                canMove = that.options.checkStep(that, direction, event);
            }

            if (!canMove) return;

            if (step) {
                that.currentStep = parseInt(step);
            } else {
                if (direction) {
                    that.currentStep++;
                } else {
                    that.currentStep--;
                }
            }

            that.$element.triggerHandler('step_changed.wizardByGiro');

            if (that.currentStep < 0) that.currentStep = 0;
            if (that.currentStep > steps.length) {
                that.currentStep = steps.length;
                triggerEnd = true;
            }

            checkStatus.call(that);

            if (triggerEnd) {

                var form = that.$element.closest('form');
                if (form.length) form.submit();

            }
        },

        methods = {
            init: function (element, options) {
                var that = this;
                this.$element = $(element);
                this.options = $.extend({}, defaults, options);

                var opts = this.options;

                this.$element.addClass('wizard');

                // add the buttons
                var stepsBar = this.$element.find('.steps'),
                topActions = this.$element.find('.top-actions'),
                bottomActions = this.$element.find('.bottom-actions'),
                progressBar = this.$element.find('.progress-bar'),
                html = '';

                // wrap steps in a container with hidden overflow, if it doesn't have a container
                if (stepsBar.parent().hasClass('wizard')) {
                    // let's add a container
                    stepsBar.wrap('<div class="steps-index-container"></div>');
                } else {
                    stepsBar.parent().addClass('steps-index-container');
                }

                if (opts.topButtons && stepsBar.length && !topActions.length) {
                    html += '<div class="top-actions"><div class="btn-group">';
                    html += '<span class="' + opts.btnClass + ' ' + opts.btnClassDefault + ' btn-prev"><span class="previous-text">' + opts.text.previous + '</span></span>';
                    html += '<span class="' + opts.btnClass + ' ' + opts.btnClassDefault + ' btn-next"><span class="next-text">' + opts.text.next + '</span><span class="finished-text">' + opts.text.finished + '</span></span>';
                    html += '</div></div>';

                    stepsBar.after(html);
                }

                html = '';
                if (opts.bottomButtons && !bottomActions.length) {
                    html += '<div class="bottom-actions">';
                    html += '<div class="left-actions"><span class="' + opts.btnClass + ' ' + opts.btnClassDefault + ' btn-prev"><span class="previous-text">' + opts.text.previous + '</span></span></div>';
                    html += '<div class="right-actions"><span class="' + opts.btnClass + ' ' + opts.btnClassDefault + ' btn-next"><span class="next-text">' + opts.text.next + '</span><span class="finished-text">' + opts.text.finished + '</span></span></div>';
                    html += '</div>';

                    that.$element.find('.steps-content').append(html);
                }

                // add arrows to btn
                this.$element.find('.btn-prev').prepend('<i class="wiz-icon-arrow-left"></i>');
                this.$element.find('.btn-next').append('<i class="wiz-icon-arrow-right"></i>');

                // get steps and prepare them
                var stepsLi = this.$element.find('.steps > li');
                for (var i = 0; i < stepsLi.length; i++) {
                    var step = $(stepsLi[i]),
                    target = step.attr('data-step'),
                    content = '<span class="step-text">' + step.html() + '</span>';

                    step.empty().html('<span class="step-index"><span class="label">' + (i + 1) + '</span></span>' + content + '<span class="wiz-icon-chevron-right colorA"></span><span class="wiz-icon-chevron-right colorB"></span>');

                    that.$element.find('.steps-content [data-step="' + target + '"]').addClass('step-pane');

                    // detect currentStep
                    if (step.hasClass('active') && !that.currentStep) {
                        that.currentStep = i + 1;
                    }
                }

                this.$element.find('.steps > li:last-child').addClass('final');

                attachEventsHandler.call(this);

                var callbacks = ['checkStep', 'onCompleted'], cb;
                for (var i = 0; i < callbacks.length; i++) {
                    cb = callbacks[i];
                    if (typeof this.options[cb] == 'string' && typeof window[this.options[cb]] == 'function') {
                        this.options[cb] = window[this.options[cb]];
                    }
                }

                checkStatus.call(this);
            },

            next: function (checkStep, event) {
                moveStep.call(this, false, true, event, checkStep);
            },

            previous: function (checkStep, event) {
                moveStep.call(this, false, false, event, checkStep);
            },

            setStep: function (step, checkStep, event) {
                moveStep.call(this, step, null, event, checkStep);
            }
        };
        ////////////////////////////////////////////////////////////////
        //CP: Custom Validation
        ////////////////////////////////////////////////////////////////
        function nameValidation() {
            if ($("#Name").val().trim() === "") {
                $("#NameMessage").html("<span class=text-danger>Ingrese el nombre</span>");
                return false;
            }
            else {
                $("#NameMessage").html("<span class=text-danger></span>");
                return true;
            }
        }

        function surnameValidation() {

            if ($("#Surname").val().trim() === "") {
                $("#SurnameMessage").html("<span class=text-danger>Ingrese el apellido</span>");
                return false;
            }
            else {
                $("#SurnameMessage").html("<span class=text-danger></span>");
                return true;
            }
        }

        function phoneValidation() {
            if ($("#Phone").val().trim() === "") {
                $("#PhoneMessage").html("<span class=text-danger>Ingrese el teléfono</span>");
                return false;
            }
            else {
                $("#PhoneMessage").html("<span class=text-danger></span>");
                return true;
            }
        }

        function emailValidation() {
            if ($("#Email").val().trim() === "") {
                $("#EmailMessage").html("<span class=text-danger>Ingrese el email</span>");
                return false;
            }
            else {
                $("#EmailMessage").html("<span class=text-danger></span>");
                return true;
            }
        }
        function userNameValidation() {
            if ($("#UserName").val().trim() === "") {
                $("#UserNameMessage").html("<span class=text-danger>Ingrese el usuario</span>");
                return false;
            }
            else {
                $("#UserNameMessage").html("<span class=text-danger></span>");
                return true;
            }
        }

        function passwordValidation() {
            if ($("#Password").val().trim() === "") {
                $("#PasswordMessage").html("<span class=text-danger>Ingrese la contraseñas</span>");
                return false;
            }
            else {
                $("#PasswordMessage").html("<span class=text-danger></span>");
                if ($("#ConfirmPassword").val() === $("#Password").val()) {
                    $("#ConfirmPasswordMessage").html("<span class=text-danger></span>");
                    return true;
                }
                else {

                    $("#ConfirmPasswordMessage").html("<span class=text-danger>Las contraseñas no coinciden</span>");
                    return false;
                }
            }
        }

        function rolIdValidation() {
            if ($("#RoleId").val() === "") {
                $("#RoleIdMessage").html("<span class=text-danger>Seleccione el rol</span>");
                return false;
            }
            else {
                $("#RoleIdMessage").html("<span class=text-danger></span>");
                return true;
            }
        }

        function customValidation(currentStep, direction) {
            var move = true;
            if (currentStep == "1") {

                move = nameValidation();
                move = surnameValidation();
                move = phoneValidation();
                move = emailValidation();

                if (move) {

                    $("#UserName").val($("#Name").val().trim().substring(0, 1) + '' + $("#Surname").val().trim());
                }
            }

            if (direction) {//se mueve hacia adelante
                if (currentStep == "2") {
                    move = rolIdValidation();
                    move = userNameValidation();
                    move = passwordValidation();
                    if (move) {
                        $("#NameConfirmation").html($("#Name").val());
                        $("#SurnameConfirmation").html($("#Surname").val());
                        $("#PhoneConfirmation").html($("#Phone").val());
                        $("#AddressConfirmation").html($("#Address").val());
                        $("#EmailConfirmation").html($("#Email").val());
                        $("#RoleIdConfirmation").html($("#RoleId").find('option:selected').text());
                        $("#UserNameConfirmation").html($("#UserName").val());
                    }
                }

                if (currentStep == "3") {
                    move = true;

                    var valueFarm;
                    var textFarm
                    $("#FarmsHidden").val("")

                    $.each($("input[name='chksFarms']:checked"), function () {//are farms checked
                        // FarmsHiddenValue = $("#FarmsHidden").val();

                        if ($("#FarmsHidden").val().length == 0) {
                            valueFarm = $(this).val();
                            textFarm = "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;>&nbsp;&nbsp;" + $(this).attr('title');
                        }
                        else {
                            valueFarm = valueFarm + "|" + $(this).val()
                            textFarm = textFarm + "<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;>&nbsp;&nbsp;" + $(this).attr('title');
                        }
                        $("#FarmsHidden").val(valueFarm);
                        $("#FarmsMessage").html(textFarm);
                    });
                }


            }
            return move;
        }
        ////////////////////////////////////////////////////////////////


        var main = function (method) {
            var thisPlugin = this.data(dataPlugin);
            if (thisPlugin) {
                if (typeof method === 'string' && thisPlugin[method]) {
                    return thisPlugin[method].apply(thisPlugin, Array.prototype.slice.call(arguments, 1));
                }
                return console.log('Method ' + arg + ' does not exist on jQuery / jqLite' + pluginName);
            } else {
                if (!method || typeof method === 'object') {
                    thisPlugin = $.extend({}, methods);
                    thisPlugin.init(this, method);
                    this.data(dataPlugin, thisPlugin);

                    return this;
                }
                return console.log(pluginName + ' is not instantiated. Please call $("selector").' + pluginName + '({options})');
            }
        };

        // plugin integration
        if ($.fn) {
            $.fn[pluginName] = main;
        } else {
            $.prototype[pluginName] = main;
        }

        $(document).ready(function () {
            var mySelector = document.querySelector('[data-wizard-init]');
            $(mySelector)[pluginName]({});

            $("#Name").focusout(function () {
                nameValidation()
            });

            $("#Surname").focusout(function () {
                surnameValidation()
            });
            $("#Phone").focusout(function () {
                phoneValidation()
            });


            $("#RoleId").change(function () {
                rolIdValidation()
            });

            $("#UserName").focusout(function () {
                userNameValidation()
            });

            $("#Password").focusout(function () {
                passwordValidation()
            });
            $("#ConfirmPassword").focusout(function () {
                passwordValidation()
            });

            $(function () {
                $('#select_all').change(function () {
                    var checkboxes = $(this).closest('form').find(':checkbox');
                    if ($(this).prop('checked')) {
                        checkboxes.prop('checked', true);
                    } else {
                        checkboxes.prop('checked', false);
                    }
                });
            });
        });




    }(bg, document, window));



</script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container-fluid">
        <div data-wizard-init>
            <input id="FarmsHidden" name="FarmsHidden" type="hidden">
            <ul class="steps">
                <li data-step="1">Datos personales</li>
                <li data-step="2">Datos de la cuenta</li>
                <li data-step="3">Establecimientos</li>
                <li data-step="4">Confirmar</li>
            </ul>
            @Html.ValidationSummary(true, "Error", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            <div class="steps-content">
                <div data-step="1">
                    <h4>Datos personales</h4>
                    <p>
                        <div class="form-group">
                            <label class="control-label">Nombre</label>
                            <input maxlength="50" id="Name" name="Name" type="text" required="required" class="form-control text-box single-line" placeholder="Ingrese el nombre">
                            <span id="NameMessage"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Apellido</label>
                            <input maxlength="50" id="Surname" name="Surname" type="text" required="required" class="form-control text-box single-line" placeholder="Ingrese apellido">
                            <span id="SurnameMessage"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Teléfono</label>
                            <input maxlength="50" id="Phone" name="Phone" type="text" required="required" class="form-control text-box single-line" placeholder="Ingrese teléfono">
                            <span id="PhoneMessage"></span>
                        </div>

                        <div class="form-group">
                            <label class="control-label">Dirección</label>
                            <input maxlength="50" id="Address" name="Address" type="text" class="form-control text-box single-line">
                        </div>
                        <div class="form-group">
                            <label class="control-label">Email</label>
                            <input maxlength="50" id="Email" name="Email" type="text" class="form-control text-box single-line" required="required" placeholder="Ingrese email">
                            <span id="EmailMessage"></span>
                        </div>

                    </p>
                </div>
                <div data-step="2">
                    <h4>Datos de la cuenta</h4>
                    <p>
                        <div class="form-group">
                            <label class="control-label">Rol</label>
                            <select id="RoleId" name="RoleId" class="form-control">
                                <option value="">-- Seleccione Rol --</option>
                                @foreach (var item in Model.Roles)
                                {
                                    <option value=@item.Value>@item.Text</option>
                                }

                            </select>
                            <span id="RoleIdMessage"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Usuario</label>
                            <input maxlength="50" id="UserName" name="UserName" type="text" required="required" class="form-control text-box single-line" placeholder="Ingrese usuario">
                            <span id="UserNameMessage"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Contraseña</label>
                            <input maxlength="50" id="Password" name="Password" type="password" required="required" class="form-control text-box single-line" placeholder="Ingrese contraseña">
                            <span id="PasswordMessage"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Confirmar contraseña</label>
                            <input maxlength="50" id="ConfirmPassword" name="ConfirmPassword" type="password" required="required" class="form-control text-box single-line" placeholder="Ingrese confirmación de contraseña">
                            <span id="ConfirmPasswordMessage"></span>
                        </div>
                    </p>
                </div>
                <div data-step="3">
                    <h4>Establecimientos</h4>
                    <p>
                        <div class="form-group">
                            <table>
                                <tr>
                                    <td style="border:none" width="1%"><input type="checkbox" id="select_all" /></td>
                                    <td style="border:none" colspan="2"><label> [Seleccionar todos]</label></td>
                                </tr>
                                @foreach (var item in Model.Farms)
                                {
                                    <tr>
                                        <td style="border:none;text-align:right">
                                            &nbsp;&nbsp;&nbsp;
                                        </td>
                                        <td style="border:none;text-align:right" width="1%">
                                            <input type="checkbox" class="checkbox" name="chksFarms" title="@item.Text.Trim()" value="@item.Value" id="@item.Value" />
                                        </td>
                                        <td style="border:none">
                                            @item.Text.Trim()
                                        </td>
                                    </tr>
                                }
                            </table>

                        </div>
                    </p>
                </div>

                <div data-step="4">
                    <h4>Confirmar</h4>
                    <p>
                        <div class="form-group">
                            <label class="control-label">Nombre: </label>
                            <span class="control-label" id="NameConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Apellido: </label>
                            <span class="control-label" id="SurnameConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Teléfono: </label>
                            <span class="control-label" id="PhoneConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Dirección: </label>
                            <span class="control-label" id="AddressConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Email: </label>
                            <span class="control-label" id="EmailConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Rol: </label>
                            <span class="control-label" id="RoleIdConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Usuario: </label>
                            <span class="control-label" id="UserNameConfirmation"></span>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Establecimientos: </label>
                            <span class="control-label" id="FarmsMessage"></span>
                        </div>

                    </p>
                </div>

            </div>
        </div>
    </div><!--/.fluid-container-->


}


<div>
    @Html.ActionLink("Volver a la lista", "Index")
</div>

