//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IrrigationAdvisor.WebApi
{
    using System;
    using System.Collections.Generic;
    
    public partial class CropIrrigationWeather
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public CropIrrigationWeather()
        {
            this.DailyRecords = new HashSet<DailyRecord>();
            this.Irrigations = new HashSet<Irrigation>();
            this.Rains = new HashSet<Rain>();
            this.WaterInputs = new HashSet<WaterInput>();
            this.WaterOutputs = new HashSet<WaterOutput>();
        }
    
        public long CropIrrigationWeatherId { get; set; }
        public string CropIrrigationWeatherName { get; set; }
        public long CropId { get; set; }
        public long SoilId { get; set; }
        public System.DateTime SowingDate { get; set; }
        public System.DateTime HarvestDate { get; set; }
        public System.DateTime CropDate { get; set; }
        public System.DateTime StartAdvisorDate { get; set; }
        public long PhenologicalStageId { get; set; }
        public double HydricBalance { get; set; }
        public double SoilHydricVolume { get; set; }
        public double TotalEvapotranspirationCropFromLastWaterInput { get; set; }
        public int CalculusMethodForPhenologicalAdjustment { get; set; }
        public long CropInformationByDateId { get; set; }
        public int DaysAfterSowing { get; set; }
        public int DaysAfterSowingModified { get; set; }
        public double GrowingDegreeDaysAccumulated { get; set; }
        public double GrowingDegreeDaysModified { get; set; }
        public long IrrigationUnitId { get; set; }
        public double PredeterminatedIrrigationQuantity { get; set; }
        public long PositionId { get; set; }
        public System.DateTime LastWaterInputDate { get; set; }
        public System.DateTime LastBigWaterInputDate { get; set; }
        public System.DateTime LastPartialWaterInputDate { get; set; }
        public double LastPartialWaterInput { get; set; }
        public System.DateTime LastBigGapWaterInputDate { get; set; }
        public long MainWeatherStationId { get; set; }
        public long AlternativeWeatherStationId { get; set; }
        public bool UsingMainWeatherStation { get; set; }
        public double TotalEvapotranspirationCrop { get; set; }
        public double TotalEffectiveRain { get; set; }
        public double TotalRealRain { get; set; }
        public double TotalIrrigation { get; set; }
        public double TotalIrrigationInHydricBalance { get; set; }
        public double TotalExtraIrrigation { get; set; }
        public double TotalExtraIrrigationInHydricBalance { get; set; }
        public string OutPut { get; set; }
        public long TotalMessageLines { get; set; }
        public long TotalMessageDailyLines { get; set; }
        public string TextLog { get; set; }
        public Nullable<long> AlternativeWeatherStation_WeatherStationId { get; set; }
        public Nullable<long> MainWeatherStation_WeatherStationId { get; set; }
        public int WeatherEventType { get; set; }
        public int DaysForHydricBalanceUnchangableAfterSowing { get; set; }
        public bool HasAdviseOfIrrigation { get; set; }
        public double Density { get; set; }
        public System.DateTime LastDayOfGrowingDegreeDays { get; set; }
        public double GrowingDegreeDaysExtraGap { get; set; }
        public double MaxIrrigationQuantity { get; set; }
        public bool AdjustableIrrigationQuantity { get; set; }
    
        public virtual Crop Crop { get; set; }
        public virtual IrrigationUnit IrrigationUnit { get; set; }
        public virtual PhenologicalStage PhenologicalStage { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<DailyRecord> DailyRecords { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Irrigation> Irrigations { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Rain> Rains { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WaterInput> WaterInputs { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<WaterOutput> WaterOutputs { get; set; }
    }
}
