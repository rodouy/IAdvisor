using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using IrrigationAdvisor.Models.Agriculture;
using IrrigationAdvisor.Models.Data;
using IrrigationAdvisor.Models.Irrigation;
using IrrigationAdvisor.Models.Localization;
using IrrigationAdvisor.Models.Management;
using IrrigationAdvisor.Models.Utilities;
using IrrigationAdvisor.Models.Water;
using IrrigationAdvisor.Models.Weather;

using IrrigationAdvisor.DBContext;

using IrrigationAdvisorConsole.Data;

namespace IrrigationAdvisorConsole.Insert._09_Management
{
    public static class CropIrrigationWeatherInsert2019
    {

        #region Management
#if true

        /// <summary>
        /// Insert CropIrrigationWeather:
        ///     - Use: Farm, WeatherStations, EffectiveRainList, Crop, CropCoefficient, 
        ///         KCList, CropInformationByDate, IrrigationUnit, Soil, HorizonList,
        ///         SowingDate, HarvestDate, CropDate, PredeterminatedIrrigationQuantity,
        ///         WeatherDataList.
        ///     - Set the initial Phenological Stage for the Crop
        ///     - Set Calculus Method for Phenological Adjustment
        ///     - Get Initial Hydric Balance
        ///     - Create the initial registry
        /// </summary>
        public static void InsertCropIrrigationWeather2019()
        {
            #region Local Variable
            Farm lFarm = null;
            Crop lCrop = null;
            Specie lSpecie = null;
            List<PhenologicalStage> lPhenologicalStages = null;
            IrrigationUnit lIrrigationUnit = null;
            WeatherStation lWeatherStationMain = null;
            String lWeatherStationMainName = "";
            List<WeatherData> lMainWeatherDataList = null;
            WeatherStation lWeatherStationAlternative = null;
            String lWeatherStationAlternativeName = "";
            List<WeatherData> lAlternativeWeatherDataList = null;

            //This is used when we have two species in one CropIrrigationWeather
            Soil lSoil = null;
            List<Horizon> lHorizonList = null;
            CropInformationByDate lCropInformationByDate = null;
            List<EffectiveRain> lEffectiveRainList = null;
            CropCoefficient lCropCoefficient = null;
            List<KC> lKCList = null;
            DateTime lSowingDate;
            DateTime lHarvestDate;
            DateTime lCropDate;
            Double lPredeterminatedIrrigationQuantity;
            #endregion

            #region Base
            var lBase = new CropIrrigationWeather
            {
                CropId = 0,
                SoilId = 0,

                SowingDate = Program.DateOfReference.AddMonths(-1),
                HarvestDate = Program.DateOfReference.AddMonths(4),
                CropDate = DateTime.Now,

                PhenologicalStageId = 0,
                HydricBalance = 0,
                SoilHydricVolume = 0,
                TotalEvapotranspirationCropFromLastWaterInput = 0,

                CalculusMethodForPhenologicalAdjustment = Utils.CalculusOfPhenologicalStage.ByDaysAfterSowing,
                CropInformationByDate = lCropInformationByDate,
                DaysAfterSowing = 1,
                DaysAfterSowingModified = 1,
                GrowingDegreeDaysAccumulated = 0,
                GrowingDegreeDaysModified = 0,

                IrrigationUnitId = 0,
                MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                         Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                  Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                AdjustableIrrigationQuantity = true,
                PredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart,

                PositionId = 0,

                RainList = null,
                IrrigationList = null,
                EvapotranspirationCropList = null,

                LastWaterInputDate = Utils.MIN_DATETIME,
                LastBigWaterInputDate = Utils.MIN_DATETIME,
                LastPartialWaterInputDate = Utils.MIN_DATETIME,
                LastPartialWaterInput = 0,

                MainWeatherStationId = 0,
                AlternativeWeatherStationId = 0,
                UsingMainWeatherStation = true,
                WeatherEventType = Utils.WeatherEventType.None,

                //DailyRecordList = null,

                TotalEvapotranspirationCrop = 0,
                TotalEffectiveRain = 0,
                TotalRealRain = 0,
                TotalIrrigation = 0,
                TotalIrrigationInHydricBalance = 0,
                TotalExtraIrrigation = 0,
                TotalExtraIrrigationInHydricBalance = 0,

            };
            #endregion

            using (var context = new IrrigationAdvisorContext())
            {

                #region Santa Lucia

                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantaLucia)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationAlternativeName_SantaLucia_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_SantaLucia_2019;

                    Console.Write(" Santa Lucia | ");

#if false

                    #region Santa Lucia Pivot 1 2019
                    //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaLucia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList).FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaLucia1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantaLucia1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaLucia1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantaLuciaPivot1_2019;
                    lHarvestDate = lSowingDate.AddDays(InitialTables.DAYS_TO_STOP_CROP_GROWS);
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaLuciaPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaLuciaPivot1_2019;
                    }
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    var lCIWSantaLuciaPivot1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaLuciaPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        //Get Effective Rain List from Region
                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    lCIWSantaLuciaPivot1_2019.Soil.HorizonList = lHorizonList;

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaLuciaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaLuciaPivot1_2019.HydricBalance = lCIWSantaLuciaPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaLuciaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaLuciaPivot1_2019);
                    context.SaveChanges();

                    //Save Titles for print
                    foreach (var item in lCIWSantaLuciaPivot1_2019.Titles)
                    {
                        var lTitlesSantaLuciaPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaLuciaPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaLuciaPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaLuciaPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaLuciaPivot1_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWSantaLuciaPivot1_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaLuciaPivot1_2019 = lCIWSantaLuciaPivot1_2019.Titles.Count();
                    long lTitleIdSantaLuciaPivot1_2019 = lFirstTitleIdSantaLuciaPivot1_2019;
                    //Update Messages Ids
                    foreach (var item in lCIWSantaLuciaPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaLuciaPivot1_2019;
                        lTitleIdSantaLuciaPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaLuciaPivot1_2019.CropIrrigationWeatherId;
                        if (lTotalTitlesSantaLuciaPivot1_2019 == lTitleIdSantaLuciaPivot1_2019 - lFirstTitleIdSantaLuciaPivot1_2019)
                        {
                            lTitleIdSantaLuciaPivot1_2019 = lFirstTitleIdSantaLuciaPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #region Santa Lucia Pivot 2 2019

                    #endregion
                    #region Santa Lucia Pivot 3 2019

                    #endregion
                    #region Santa Lucia Pivot 4 2019

                    #endregion
                    #region Santa Lucia Pivot 5 2019

                    #endregion

#endif
                }

                #endregion
                #region DCA El Paraiso
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCAElParaiso)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DCAElParaiso_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DCAElParaiso_2019;

                    Console.Write(" DCA - El Paraiso | ");

#if true
                    #region DCA - El Paraiso Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCAElParaiso
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCAElParaiso2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCAElParaiso2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCAElParaiso2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_DCAElParaisoPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_DCAElParaisoPivot2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA ElParaiso Pivot2 2019
                    var lCIWDCAElParaisoPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCAElParaisoPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCAElParaisoPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCAElParaisoPivot2_2019.HydricBalance = lCIWDCAElParaisoPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCAElParaisoPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCAElParaisoPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCAElParaisoPivot2_2019.Titles)
                    {
                        var lTitlesDCAElParaisoPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCAElParaisoPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCAElParaisoPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCAElParaisoPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCAElParaisoPivot2_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCAElParaisoPivot2_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCAElParaisoPivot2_2019 = lCIWDCAElParaisoPivot2_2019.Titles.Count();
                    long lTitleIdDCAElParaisoPivot2_2019 = lFirstTitleIdDCAElParaisoPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCAElParaisoPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCAElParaisoPivot2_2019;
                        lTitleIdDCAElParaisoPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCAElParaisoPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCAElParaisoPivot2_2019 - lFirstTitleIdDCAElParaisoPivot2_2019) % (lTotalTitlesDCAElParaisoPivot2_2019) == 0)
                        {
                            lTitleIdDCAElParaisoPivot2_2019 = lFirstTitleIdDCAElParaisoPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - El Paraiso Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCAElParaiso
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCAElParaiso3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCAElParaiso3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCAElParaiso3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCAElParaisoPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCAElParaisoPivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA ElParaiso Pivot3 2019
                    var lCIWDCAElParaisoPivot3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCAElParaisoPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCAElParaisoPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCAElParaisoPivot3_2019.HydricBalance = lCIWDCAElParaisoPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCAElParaisoPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCAElParaisoPivot3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCAElParaisoPivot3_2019.Titles)
                    {
                        var lTitlesDCAElParaisoPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCAElParaisoPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCAElParaisoPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCAElParaisoPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCAElParaisoPivot3_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCAElParaisoPivot3_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCAElParaisoPivot3_2019 = lCIWDCAElParaisoPivot3_2019.Titles.Count();
                    long lTitleIdDCAElParaisoPivot3_2019 = lFirstTitleIdDCAElParaisoPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCAElParaisoPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCAElParaisoPivot3_2019;
                        lTitleIdDCAElParaisoPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCAElParaisoPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCAElParaisoPivot3_2019 - lFirstTitleIdDCAElParaisoPivot3_2019) % (lTotalTitlesDCAElParaisoPivot3_2019) == 0)
                        {
                            lTitleIdDCAElParaisoPivot3_2019 = lFirstTitleIdDCAElParaisoPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - El Paraiso Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCAElParaiso
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCAElParaiso4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCAElParaiso4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCAElParaiso4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCAElParaisoPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCAElParaisoPivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA ElParaiso Pivot4 2019
                    var lCIWDCAElParaisoPivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCAElParaisoPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCAElParaisoPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCAElParaisoPivot4_2019.HydricBalance = lCIWDCAElParaisoPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCAElParaisoPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCAElParaisoPivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCAElParaisoPivot4_2019.Titles)
                    {
                        var lTitlesDCAElParaisoPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCAElParaisoPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCAElParaisoPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCAElParaisoPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCAElParaisoPivot4_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCAElParaisoPivot4_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCAElParaisoPivot4_2019 = lCIWDCAElParaisoPivot4_2019.Titles.Count();
                    long lTitleIdDCAElParaisoPivot4_2019 = lFirstTitleIdDCAElParaisoPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCAElParaisoPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCAElParaisoPivot4_2019;
                        lTitleIdDCAElParaisoPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCAElParaisoPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCAElParaisoPivot4_2019 - lFirstTitleIdDCAElParaisoPivot4_2019) % (lTotalTitlesDCAElParaisoPivot4_2019) == 0)
                        {
                            lTitleIdDCAElParaisoPivot4_2019 = lFirstTitleIdDCAElParaisoPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
#if false
                    #region DCA - El Paraiso Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCAElParaiso
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCAElParaiso1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCAElParaiso1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCAElParaiso1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_DCAElParaisoPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_DCAElParaisoPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCAElParaisoPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA ElParaiso Pivot1 2019
                    var lCIWDCAElParaisoPivot1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCAElParaisoPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCAElParaisoPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCAElParaisoPivot1_2019.HydricBalance = lCIWDCAElParaisoPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCAElParaisoPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCAElParaisoPivot1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCAElParaisoPivot1_2019.Titles)
                    {
                        var lTitlesDCAElParaisoPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCAElParaisoPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCAElParaisoPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCAElParaisoPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCAElParaisoPivot1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCAElParaisoPivot1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCAElParaisoPivot1_2019 = lCIWDCAElParaisoPivot1_2019.Titles.Count();
                    long lTitleIdDCAElParaisoPivot1_2019 = lFirstTitleIdDCAElParaisoPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCAElParaisoPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCAElParaisoPivot1_2019;
                        lTitleIdDCAElParaisoPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCAElParaisoPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCAElParaisoPivot1_2019 - lFirstTitleIdDCAElParaisoPivot1_2019) % (lTotalTitlesDCAElParaisoPivot1_2019) == 0)
                        {
                            lTitleIdDCAElParaisoPivot1_2019 = lFirstTitleIdDCAElParaisoPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif

                }
                #endregion
                #region DCA La Perdiz
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                        //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                        //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                        || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                        || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCALaPerdiz)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DCALaPerdiz_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DCALaPerdiz_2019;

                    Console.Write(" DCA - La Perdiz | ");
#if true
                    #region DCA - La Perdiz Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot1 2019
                    var lCIWDCALaPerdizPivot1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot1_2019.HydricBalance = lCIWDCALaPerdizPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot1_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot1_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot1_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot1_2019 = lCIWDCALaPerdizPivot1_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot1_2019 = lFirstTitleIdDCALaPerdizPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot1_2019;
                        lTitleIdDCALaPerdizPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot1_2019 - lFirstTitleIdDCALaPerdizPivot1_2019) % (lTotalTitlesDCALaPerdizPivot1_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot1_2019 = lFirstTitleIdDCALaPerdizPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
#if false
                    #region DCA - La Perdiz Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                            .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                            .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                       weatherdata.Date <= lHarvestDate) &&
                                                       weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot2 2019
                    var lCIWDCALaPerdizPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot2_2019.HydricBalance = lCIWDCALaPerdizPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot2_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot2_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot2_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot2_2019 = lCIWDCALaPerdizPivot2_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot2_2019 = lFirstTitleIdDCALaPerdizPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot2_2019;
                        lTitleIdDCALaPerdizPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot2_2019 - lFirstTitleIdDCALaPerdizPivot2_2019) % (lTotalTitlesDCALaPerdizPivot2_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot2_2019 = lFirstTitleIdDCALaPerdizPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                            .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                            .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot3_2019;
                    lCropDate = DateTime.Now;

                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                       weatherdata.Date <= lHarvestDate) &&
                                                       weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot3 2019
                    var lCIWDCALaPerdizPivot3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot3_2019.HydricBalance = lCIWDCALaPerdizPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot3_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot3_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot3_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot3_2019 = lCIWDCALaPerdizPivot3_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot3_2019 = lFirstTitleIdDCALaPerdizPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot3_2019;
                        lTitleIdDCALaPerdizPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot3_2019 - lFirstTitleIdDCALaPerdizPivot3_2019) % (lTotalTitlesDCALaPerdizPivot3_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot3_2019 = lFirstTitleIdDCALaPerdizPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                            .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                            .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                       weatherdata.Date <= lHarvestDate) &&
                                                       weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot5 2019
                    var lCIWDCALaPerdizPivot5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot5_2019.HydricBalance = lCIWDCALaPerdizPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot5_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot5_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot5_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot5_2019 = lCIWDCALaPerdizPivot5_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot5_2019 = lFirstTitleIdDCALaPerdizPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot5_2019;
                        lTitleIdDCALaPerdizPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot5_2019 - lFirstTitleIdDCALaPerdizPivot5_2019) % (lTotalTitlesDCALaPerdizPivot5_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot5_2019 = lFirstTitleIdDCALaPerdizPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 10b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz10b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz10b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot10b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot10b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot10b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot10b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot10b 2019
                    var lCIWDCALaPerdizPivot10b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot10b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot10b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot10b_2019.HydricBalance = lCIWDCALaPerdizPivot10b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot10b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot10b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot10b_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot10b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot10b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot10b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot10b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot10b_2019 = (from title in context.Titles
                                                                  where title.Name == "DDS"
                                                                     && title.Daily == false
                                                                     && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot10b_2019.CropIrrigationWeatherId
                                                                  select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot10b_2019 = lCIWDCALaPerdizPivot10b_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot10b_2019 = lFirstTitleIdDCALaPerdizPivot10b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot10b_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot10b_2019;
                        lTitleIdDCALaPerdizPivot10b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot10b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot10b_2019 - lFirstTitleIdDCALaPerdizPivot10b_2019) % (lTotalTitlesDCALaPerdizPivot10b_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot10b_2019 = lFirstTitleIdDCALaPerdizPivot10b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
#if true
                    #region DCA - La Perdiz Pivot 6 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz6
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz6
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz6)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot6_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot6_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot6_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot6_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot6 2019
                    var lCIWDCALaPerdizPivot6_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot6_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot6_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot6_2019.HydricBalance = lCIWDCALaPerdizPivot6_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot6_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot6_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot6_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot6_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot6_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot6_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot6_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot6_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot6_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot6_2019 = lCIWDCALaPerdizPivot6_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot6_2019 = lFirstTitleIdDCALaPerdizPivot6_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot6_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot6_2019;
                        lTitleIdDCALaPerdizPivot6_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot6_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot6_2019 - lFirstTitleIdDCALaPerdizPivot6_2019) % (lTotalTitlesDCALaPerdizPivot6_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot6_2019 = lFirstTitleIdDCALaPerdizPivot6_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
#if true
                    #region DCA - La Perdiz Pivot 7 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz7
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz7
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz7)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot7_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot7_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot7_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot7_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot7 2019
                    var lCIWDCALaPerdizPivot7_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot7_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot7_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot7_2019.HydricBalance = lCIWDCALaPerdizPivot7_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot7_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot7_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot7_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot7_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot7_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot7_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot7_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot7_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot7_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot7_2019 = lCIWDCALaPerdizPivot7_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot7_2019 = lFirstTitleIdDCALaPerdizPivot7_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot7_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot7_2019;
                        lTitleIdDCALaPerdizPivot7_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot7_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot7_2019 - lFirstTitleIdDCALaPerdizPivot7_2019) % (lTotalTitlesDCALaPerdizPivot7_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot7_2019 = lFirstTitleIdDCALaPerdizPivot7_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 10a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz10a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz10a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot10a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot10a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot10a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot10a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot10a 2019
                    var lCIWDCALaPerdizPivot10a_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot10a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot10a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot10a_2019.HydricBalance = lCIWDCALaPerdizPivot10a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot10a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot10a_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot10a_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot10a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot10a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot10a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot10a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot10a_2019 = (from title in context.Titles
                                                                  where title.Name == "DDS"
                                                                     && title.Daily == false
                                                                     && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot10a_2019.CropIrrigationWeatherId
                                                                  select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot10a_2019 = lCIWDCALaPerdizPivot10a_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot10a_2019 = lFirstTitleIdDCALaPerdizPivot10a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot10a_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot10a_2019;
                        lTitleIdDCALaPerdizPivot10a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot10a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot10a_2019 - lFirstTitleIdDCALaPerdizPivot10a_2019) % (lTotalTitlesDCALaPerdizPivot10a_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot10a_2019 = lFirstTitleIdDCALaPerdizPivot10a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 14 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz14
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz14
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz14)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot14_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot14_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot14_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot14_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot14 2019
                    var lCIWDCALaPerdizPivot14_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot14_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot14_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot14_2019.HydricBalance = lCIWDCALaPerdizPivot14_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot14_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot14_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot14_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot14_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot14_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot14_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot14_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot14_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot14_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot14_2019 = lCIWDCALaPerdizPivot14_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot14_2019 = lFirstTitleIdDCALaPerdizPivot14_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot14_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot14_2019;
                        lTitleIdDCALaPerdizPivot14_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot14_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot14_2019 - lFirstTitleIdDCALaPerdizPivot14_2019) % (lTotalTitlesDCALaPerdizPivot14_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot14_2019 = lFirstTitleIdDCALaPerdizPivot14_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - La Perdiz Pivot 15 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz15
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCALaPerdiz15
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCALaPerdiz15)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCALaPerdizPivot15_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCALaPerdizPivot15_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot15_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCALaPerdizPivot15_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA LaPerdiz Pivot15 2019
                    var lCIWDCALaPerdizPivot15_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCALaPerdizPivot15_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCALaPerdizPivot15_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCALaPerdizPivot15_2019.HydricBalance = lCIWDCALaPerdizPivot15_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCALaPerdizPivot15_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCALaPerdizPivot15_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCALaPerdizPivot15_2019.Titles)
                    {
                        var lTitlesDCALaPerdizPivot15_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCALaPerdizPivot15_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCALaPerdizPivot15_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCALaPerdizPivot15_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCALaPerdizPivot15_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWDCALaPerdizPivot15_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCALaPerdizPivot15_2019 = lCIWDCALaPerdizPivot15_2019.Titles.Count();
                    long lTitleIdDCALaPerdizPivot15_2019 = lFirstTitleIdDCALaPerdizPivot15_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCALaPerdizPivot15_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCALaPerdizPivot15_2019;
                        lTitleIdDCALaPerdizPivot15_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCALaPerdizPivot15_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCALaPerdizPivot15_2019 - lFirstTitleIdDCALaPerdizPivot15_2019) % (lTotalTitlesDCALaPerdizPivot15_2019) == 0)
                        {
                            lTitleIdDCALaPerdizPivot15_2019 = lFirstTitleIdDCALaPerdizPivot15_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
#if true
#endif
                }
                #endregion
                #region DCA San Jose
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCASanJose)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DCASanJose_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DCASanJose_2019;

                    Console.Write(" DCA - San Jose | ");

                    #region DCA - San Jose Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCASanJose
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCASanJose1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCASanJose1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCASanJose1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCASanJosePivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCASanJosePivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA SanJose Pivot1 2019
                    var lCIWDCASanJosePivot1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCASanJosePivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCASanJosePivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCASanJosePivot1_2019.HydricBalance = lCIWDCASanJosePivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCASanJosePivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCASanJosePivot1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCASanJosePivot1_2019.Titles)
                    {
                        var lTitlesDCASanJosePivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCASanJosePivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCASanJosePivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCASanJosePivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCASanJosePivot1_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWDCASanJosePivot1_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCASanJosePivot1_2019 = lCIWDCASanJosePivot1_2019.Titles.Count();
                    long lTitleIdDCASanJosePivot1_2019 = lFirstTitleIdDCASanJosePivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCASanJosePivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCASanJosePivot1_2019;
                        lTitleIdDCASanJosePivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCASanJosePivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCASanJosePivot1_2019 - lFirstTitleIdDCASanJosePivot1_2019) % (lTotalTitlesDCASanJosePivot1_2019) == 0)
                        {
                            lTitleIdDCASanJosePivot1_2019 = lFirstTitleIdDCASanJosePivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - San Jose Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCASanJose
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCASanJose2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCASanJose2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCASanJose2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCASanJosePivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCASanJosePivot2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA SanJose Pivot2 2019
                    var lCIWDCASanJosePivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCASanJosePivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCASanJosePivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCASanJosePivot2_2019.HydricBalance = lCIWDCASanJosePivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCASanJosePivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCASanJosePivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCASanJosePivot2_2019.Titles)
                    {
                        var lTitlesDCASanJosePivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCASanJosePivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCASanJosePivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCASanJosePivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCASanJosePivot2_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWDCASanJosePivot2_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCASanJosePivot2_2019 = lCIWDCASanJosePivot2_2019.Titles.Count();
                    long lTitleIdDCASanJosePivot2_2019 = lFirstTitleIdDCASanJosePivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCASanJosePivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCASanJosePivot2_2019;
                        lTitleIdDCASanJosePivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCASanJosePivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCASanJosePivot2_2019 - lFirstTitleIdDCASanJosePivot2_2019) % (lTotalTitlesDCASanJosePivot2_2019) == 0)
                        {
                            lTitleIdDCASanJosePivot2_2019 = lFirstTitleIdDCASanJosePivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - San Jose Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCASanJose
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCASanJose3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCASanJose3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCASanJose3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCASanJosePivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCASanJosePivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA SanJose Pivot3 2019
                    var lCIWDCASanJosePivot3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCASanJosePivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCASanJosePivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCASanJosePivot3_2019.HydricBalance = lCIWDCASanJosePivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCASanJosePivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCASanJosePivot3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCASanJosePivot3_2019.Titles)
                    {
                        var lTitlesDCASanJosePivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCASanJosePivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCASanJosePivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCASanJosePivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCASanJosePivot3_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWDCASanJosePivot3_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCASanJosePivot3_2019 = lCIWDCASanJosePivot3_2019.Titles.Count();
                    long lTitleIdDCASanJosePivot3_2019 = lFirstTitleIdDCASanJosePivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCASanJosePivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCASanJosePivot3_2019;
                        lTitleIdDCASanJosePivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCASanJosePivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCASanJosePivot3_2019 - lFirstTitleIdDCASanJosePivot3_2019) % (lTotalTitlesDCASanJosePivot3_2019) == 0)
                        {
                            lTitleIdDCASanJosePivot3_2019 = lFirstTitleIdDCASanJosePivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region DCA - San Jose Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCASanJose
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCASanJose4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDCASanJose4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDCASanJose4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DCASanJosePivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DCASanJosePivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DCASanJosePivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DCA SanJose Pivot4 2019
                    var lCIWDCASanJosePivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDCASanJosePivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDCASanJosePivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDCASanJosePivot4_2019.HydricBalance = lCIWDCASanJosePivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDCASanJosePivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDCASanJosePivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDCASanJosePivot4_2019.Titles)
                    {
                        var lTitlesDCASanJosePivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDCASanJosePivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDCASanJosePivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDCASanJosePivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDCASanJosePivot4_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWDCASanJosePivot4_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDCASanJosePivot4_2019 = lCIWDCASanJosePivot4_2019.Titles.Count();
                    long lTitleIdDCASanJosePivot4_2019 = lFirstTitleIdDCASanJosePivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDCASanJosePivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdDCASanJosePivot4_2019;
                        lTitleIdDCASanJosePivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDCASanJosePivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDCASanJosePivot4_2019 - lFirstTitleIdDCASanJosePivot4_2019) % (lTotalTitlesDCASanJosePivot4_2019) == 0)
                        {
                            lTitleIdDCASanJosePivot4_2019 = lFirstTitleIdDCASanJosePivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

                }
                #endregion
                #region Del Lago - San Pedro
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoSanPedro)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DelLagoSanPedro_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DelLagoSanPedro_2019;

                    Console.Write(" Del Lago - San Pedro | ");
#if true
#endif
                    #region Del Lago - San Pedro Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoSanPedro
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoSanPedro5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoSanPedro5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoSanPedro5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoSanPedroPivot5_2019;
                    lHarvestDate = lSowingDate.AddDays(InitialTables.DAYS_TO_STOP_CROP_GROWS);
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Del Lago - San Pedro Pivot 5 2019
                    var lCIWDelLagoSanPedroPivot5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoSanPedroPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoSanPedroPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoSanPedroPivot5_2019.HydricBalance = lCIWDelLagoSanPedroPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoSanPedroPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoSanPedroPivot5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoSanPedroPivot5_2019.Titles)
                    {
                        var lTitlesDelLagoSanPedroPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoSanPedroPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoSanPedroPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoSanPedroPivot5_2019 = (from title in context.Titles
                                                                    where title.Name == "DDS"
                                                                       && title.Daily == false
                                                                       && title.CropIrrigationWeatherId == lCIWDelLagoSanPedroPivot5_2019.CropIrrigationWeatherId
                                                                    select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoSanPedroPivot5_2019 = lCIWDelLagoSanPedroPivot5_2019.Titles.Count();
                    long lTitleIdDelLagoSanPedroPivot5_2019 = lFirstTitleIdDelLagoSanPedroPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoSanPedroPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoSanPedroPivot5_2019;
                        lTitleIdDelLagoSanPedroPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoSanPedroPivot5_2019 - lFirstTitleIdDelLagoSanPedroPivot5_2019) % (lTotalTitlesDelLagoSanPedroPivot5_2019) == 0)
                        {
                            lTitleIdDelLagoSanPedroPivot5_2019 = lFirstTitleIdDelLagoSanPedroPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - San Pedro Pivot 6 2019

                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoSanPedro
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoSanPedro6
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoSanPedro6
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoSanPedro6)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoSanPedroPivot6_2019;
                    lHarvestDate = lSowingDate.AddDays(InitialTables.DAYS_TO_STOP_CROP_GROWS);
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot6_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot6_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Del Lago - San Pedro Pivot 6 2019
                    var lCIWDelLagoSanPedroPivot6_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoSanPedroPivot6_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoSanPedroPivot6_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoSanPedroPivot6_2019.HydricBalance = lCIWDelLagoSanPedroPivot6_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoSanPedroPivot6_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoSanPedroPivot6_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoSanPedroPivot6_2019.Titles)
                    {
                        var lTitlesDelLagoSanPedroPivot6_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot6_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoSanPedroPivot6_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoSanPedroPivot6_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoSanPedroPivot6_2019 = (from title in context.Titles
                                                                    where title.Name == "DDS"
                                                                       && title.Daily == false
                                                                       && title.CropIrrigationWeatherId == lCIWDelLagoSanPedroPivot6_2019.CropIrrigationWeatherId
                                                                    select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoSanPedroPivot6_2019 = lCIWDelLagoSanPedroPivot6_2019.Titles.Count();
                    long lTitleIdDelLagoSanPedroPivot6_2019 = lFirstTitleIdDelLagoSanPedroPivot6_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoSanPedroPivot6_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoSanPedroPivot6_2019;
                        lTitleIdDelLagoSanPedroPivot6_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot6_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoSanPedroPivot6_2019 - lFirstTitleIdDelLagoSanPedroPivot6_2019) % (lTotalTitlesDelLagoSanPedroPivot6_2019) == 0)
                        {
                            lTitleIdDelLagoSanPedroPivot6_2019 = lFirstTitleIdDelLagoSanPedroPivot6_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion

                    #endregion
                    #region Del Lago - San Pedro Pivot 7 2019

                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoSanPedro
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoSanPedro7
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoSanPedro7
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoSanPedro7)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoSanPedroPivot7_2019;
                    lHarvestDate = lSowingDate.AddDays(InitialTables.DAYS_TO_STOP_CROP_GROWS);
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot7_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot7_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Del Lago - San Pedro Pivot 7 2019
                    var lCIWDelLagoSanPedroPivot7_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoSanPedroPivot7_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoSanPedroPivot7_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoSanPedroPivot7_2019.HydricBalance = lCIWDelLagoSanPedroPivot7_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoSanPedroPivot7_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoSanPedroPivot7_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoSanPedroPivot7_2019.Titles)
                    {
                        var lTitlesDelLagoSanPedroPivot7_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot7_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoSanPedroPivot7_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoSanPedroPivot7_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoSanPedroPivot7_2019 = (from title in context.Titles
                                                                    where title.Name == "DDS"
                                                                       && title.Daily == false
                                                                       && title.CropIrrigationWeatherId == lCIWDelLagoSanPedroPivot7_2019.CropIrrigationWeatherId
                                                                    select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoSanPedroPivot7_2019 = lCIWDelLagoSanPedroPivot7_2019.Titles.Count();
                    long lTitleIdDelLagoSanPedroPivot7_2019 = lFirstTitleIdDelLagoSanPedroPivot7_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoSanPedroPivot7_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoSanPedroPivot7_2019;
                        lTitleIdDelLagoSanPedroPivot7_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot7_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoSanPedroPivot7_2019 - lFirstTitleIdDelLagoSanPedroPivot7_2019) % (lTotalTitlesDelLagoSanPedroPivot7_2019) == 0)
                        {
                            lTitleIdDelLagoSanPedroPivot7_2019 = lFirstTitleIdDelLagoSanPedroPivot7_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion

                    #endregion
                    #region Del Lago - San Pedro Pivot 8 2019

                    #region Farm ////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoSanPedro
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop ////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture ////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoSanPedro8
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoSanPedro8
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoSanPedro8)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoSanPedroPivot8_2019;
                    lHarvestDate = lSowingDate.AddDays(InitialTables.DAYS_TO_STOP_CROP_GROWS);
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot8_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoSanPedroPivot8_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Del Lago - San Pedro Pivot 8 2019
                    var lCIWDelLagoSanPedroPivot8_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoSanPedroPivot8_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoSanPedroPivot8_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoSanPedroPivot8_2019.HydricBalance = lCIWDelLagoSanPedroPivot8_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoSanPedroPivot8_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoSanPedroPivot8_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoSanPedroPivot8_2019.Titles)
                    {
                        var lTitlesDelLagoSanPedroPivot8_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot8_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoSanPedroPivot8_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoSanPedroPivot8_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoSanPedroPivot8_2019 = (from title in context.Titles
                                                                    where title.Name == "DDS"
                                                                       && title.Daily == false
                                                                       && title.CropIrrigationWeatherId == lCIWDelLagoSanPedroPivot8_2019.CropIrrigationWeatherId
                                                                    select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoSanPedroPivot8_2019 = lCIWDelLagoSanPedroPivot8_2019.Titles.Count();
                    long lTitleIdDelLagoSanPedroPivot8_2019 = lFirstTitleIdDelLagoSanPedroPivot8_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoSanPedroPivot8_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoSanPedroPivot8_2019;
                        lTitleIdDelLagoSanPedroPivot8_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoSanPedroPivot8_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoSanPedroPivot8_2019 - lFirstTitleIdDelLagoSanPedroPivot8_2019) % (lTotalTitlesDelLagoSanPedroPivot8_2019) == 0)
                        {
                            lTitleIdDelLagoSanPedroPivot8_2019 = lFirstTitleIdDelLagoSanPedroPivot8_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion

                    #endregion

                }
                #endregion
                #region Del Lago - El Mirador
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoElMirador)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DelLagoElMirador_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DelLagoElMirador_2019;

                    Console.Write(" Del Lago - El Mirador | ");

                    #region Del Lago - El Mirador Pivot 1 2019
#if true
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot1 2019
                    var lCIWDelLagoElMiradorPivot1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot1_2019.HydricBalance = lCIWDelLagoElMiradorPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot1_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot1_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot1_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot1_2019 = lCIWDelLagoElMiradorPivot1_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot1_2019 = lFirstTitleIdDelLagoElMiradorPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot1_2019;
                        lTitleIdDelLagoElMiradorPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot1_2019 - lFirstTitleIdDelLagoElMiradorPivot1_2019) % (lTotalTitlesDelLagoElMiradorPivot1_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot1_2019 = lFirstTitleIdDelLagoElMiradorPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
#endif
                    #endregion
                    #region Del Lago - El Mirador Pivot 2 2019
#if true
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot2 2019
                    var lCIWDelLagoElMiradorPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot2_2019.HydricBalance = lCIWDelLagoElMiradorPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot2_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot2_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot2_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot2_2019 = lCIWDelLagoElMiradorPivot2_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot2_2019 = lFirstTitleIdDelLagoElMiradorPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot2_2019;
                        lTitleIdDelLagoElMiradorPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot2_2019 - lFirstTitleIdDelLagoElMiradorPivot2_2019) % (lTotalTitlesDelLagoElMiradorPivot2_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot2_2019 = lFirstTitleIdDelLagoElMiradorPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
#endif
                    #endregion
#if false
                    #region Del Lago - El Mirador Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot3 2019
                    var lCIWDelLagoElMiradorPivot3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot3_2019.HydricBalance = lCIWDelLagoElMiradorPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot3_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot3_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot3_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot3_2019 = lCIWDelLagoElMiradorPivot3_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot3_2019 = lFirstTitleIdDelLagoElMiradorPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot3_2019;
                        lTitleIdDelLagoElMiradorPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot3_2019 - lFirstTitleIdDelLagoElMiradorPivot3_2019) % (lTotalTitlesDelLagoElMiradorPivot3_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot3_2019 = lFirstTitleIdDelLagoElMiradorPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 4 2019
#if true
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot4 2019
                    var lCIWDelLagoElMiradorPivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot4_2019.HydricBalance = lCIWDelLagoElMiradorPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot4_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot4_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot4_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot4_2019 = lCIWDelLagoElMiradorPivot4_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot4_2019 = lFirstTitleIdDelLagoElMiradorPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot4_2019;
                        lTitleIdDelLagoElMiradorPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot4_2019 - lFirstTitleIdDelLagoElMiradorPivot4_2019) % (lTotalTitlesDelLagoElMiradorPivot4_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot4_2019 = lFirstTitleIdDelLagoElMiradorPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
#endif
                    #endregion
                    #region Del Lago - El Mirador Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot5 2019
                    var lCIWDelLagoElMiradorPivot5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot5_2019.HydricBalance = lCIWDelLagoElMiradorPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot5_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot5_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot5_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot5_2019 = lCIWDelLagoElMiradorPivot5_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot5_2019 = lFirstTitleIdDelLagoElMiradorPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot5_2019;
                        lTitleIdDelLagoElMiradorPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot5_2019 - lFirstTitleIdDelLagoElMiradorPivot5_2019) % (lTotalTitlesDelLagoElMiradorPivot5_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot5_2019 = lFirstTitleIdDelLagoElMiradorPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 6 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador6
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador6
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador6)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot6_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot6_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot6_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot6_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot6 2019
                    var lCIWDelLagoElMiradorPivot6_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot6_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot6_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot6_2019.HydricBalance = lCIWDelLagoElMiradorPivot6_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot6_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot6_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot6_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot6_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot6_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot6_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot6_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot6_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot6_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot6_2019 = lCIWDelLagoElMiradorPivot6_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot6_2019 = lFirstTitleIdDelLagoElMiradorPivot6_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot6_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot6_2019;
                        lTitleIdDelLagoElMiradorPivot6_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot6_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot6_2019 - lFirstTitleIdDelLagoElMiradorPivot6_2019) % (lTotalTitlesDelLagoElMiradorPivot6_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot6_2019 = lFirstTitleIdDelLagoElMiradorPivot6_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 7 2019
#if false
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador7
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador7
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador7)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot7_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot7_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot7_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot7_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot7 2019
                    var lCIWDelLagoElMiradorPivot7_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot7_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot7_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot7_2019.HydricBalance = lCIWDelLagoElMiradorPivot7_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot7_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot7_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot7_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot7_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot7_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot7_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot7_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot7_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot7_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot7_2019 = lCIWDelLagoElMiradorPivot7_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot7_2019 = lFirstTitleIdDelLagoElMiradorPivot7_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot7_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot7_2019;
                        lTitleIdDelLagoElMiradorPivot7_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot7_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot7_2019 - lFirstTitleIdDelLagoElMiradorPivot7_2019) % (lTotalTitlesDelLagoElMiradorPivot7_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot7_2019 = lFirstTitleIdDelLagoElMiradorPivot7_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
#endif
                    #endregion
                    #region Del Lago - El Mirador Pivot 8 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador8
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador8
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador8)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot8_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot8_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot8_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot8_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot8 2019
                    var lCIWDelLagoElMiradorPivot8_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot8_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot8_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot8_2019.HydricBalance = lCIWDelLagoElMiradorPivot8_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot8_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot8_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot8_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot8_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot8_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot8_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot8_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot8_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot8_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot8_2019 = lCIWDelLagoElMiradorPivot8_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot8_2019 = lFirstTitleIdDelLagoElMiradorPivot8_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot8_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot8_2019;
                        lTitleIdDelLagoElMiradorPivot8_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot8_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot8_2019 - lFirstTitleIdDelLagoElMiradorPivot8_2019) % (lTotalTitlesDelLagoElMiradorPivot8_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot8_2019 = lFirstTitleIdDelLagoElMiradorPivot8_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 9 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador9
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador9
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador9)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot9_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot9_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot9_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot9_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot9 2019
                    var lCIWDelLagoElMiradorPivot9_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot9_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot9_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot9_2019.HydricBalance = lCIWDelLagoElMiradorPivot9_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot9_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot9_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot9_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot9_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot9_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot9_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot9_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot9_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot9_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot9_2019 = lCIWDelLagoElMiradorPivot9_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot9_2019 = lFirstTitleIdDelLagoElMiradorPivot9_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot9_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot9_2019;
                        lTitleIdDelLagoElMiradorPivot9_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot9_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot9_2019 - lFirstTitleIdDelLagoElMiradorPivot9_2019) % (lTotalTitlesDelLagoElMiradorPivot9_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot9_2019 = lFirstTitleIdDelLagoElMiradorPivot9_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 10 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador10
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador10
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador10)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot10_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot10_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot10_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot10_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot10 2019
                    var lCIWDelLagoElMiradorPivot10_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot10_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot10_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot10_2019.HydricBalance = lCIWDelLagoElMiradorPivot10_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot10_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot10_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot10_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot10_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot10_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot10_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot10_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot10_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot10_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot10_2019 = lCIWDelLagoElMiradorPivot10_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot10_2019 = lFirstTitleIdDelLagoElMiradorPivot10_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot10_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot10_2019;
                        lTitleIdDelLagoElMiradorPivot10_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot10_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot10_2019 - lFirstTitleIdDelLagoElMiradorPivot10_2019) % (lTotalTitlesDelLagoElMiradorPivot10_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot10_2019 = lFirstTitleIdDelLagoElMiradorPivot10_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 11 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador11
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador11
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador11)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot11_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot11_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot11_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot11_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot11 2019
                    var lCIWDelLagoElMiradorPivot11_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot11_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot11_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot11_2019.HydricBalance = lCIWDelLagoElMiradorPivot11_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot11_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot11_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot11_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot11_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot11_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot11_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot11_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot11_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot11_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot11_2019 = lCIWDelLagoElMiradorPivot11_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot11_2019 = lFirstTitleIdDelLagoElMiradorPivot11_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot11_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot11_2019;
                        lTitleIdDelLagoElMiradorPivot11_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot11_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot11_2019 - lFirstTitleIdDelLagoElMiradorPivot11_2019) % (lTotalTitlesDelLagoElMiradorPivot11_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot11_2019 = lFirstTitleIdDelLagoElMiradorPivot11_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 12 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador12
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador12
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador12)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot12_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot12_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot12_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot12_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot12 2019
                    var lCIWDelLagoElMiradorPivot12_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot12_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot12_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot12_2019.HydricBalance = lCIWDelLagoElMiradorPivot12_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot12_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot12_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot12_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot12_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot12_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot12_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot12_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot12_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot12_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot12_2019 = lCIWDelLagoElMiradorPivot12_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot12_2019 = lFirstTitleIdDelLagoElMiradorPivot12_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot12_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot12_2019;
                        lTitleIdDelLagoElMiradorPivot12_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot12_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot12_2019 - lFirstTitleIdDelLagoElMiradorPivot12_2019) % (lTotalTitlesDelLagoElMiradorPivot12_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot12_2019 = lFirstTitleIdDelLagoElMiradorPivot12_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 13 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador13
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador13
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador13)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot13_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot13_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot13_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot13_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot13 2019
                    var lCIWDelLagoElMiradorPivot13_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot13_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot13_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot13_2019.HydricBalance = lCIWDelLagoElMiradorPivot13_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot13_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot13_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot13_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot13_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot13_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot13_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot13_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot13_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot13_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot13_2019 = lCIWDelLagoElMiradorPivot13_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot13_2019 = lFirstTitleIdDelLagoElMiradorPivot13_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot13_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot13_2019;
                        lTitleIdDelLagoElMiradorPivot13_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot13_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot13_2019 - lFirstTitleIdDelLagoElMiradorPivot13_2019) % (lTotalTitlesDelLagoElMiradorPivot13_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot13_2019 = lFirstTitleIdDelLagoElMiradorPivot13_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 14 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador14
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador14
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador14)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot14_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot14_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot14_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot14_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot14 2019
                    var lCIWDelLagoElMiradorPivot14_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot14_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot14_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot14_2019.HydricBalance = lCIWDelLagoElMiradorPivot14_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot14_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot14_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot14_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot14_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot14_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot14_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot14_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot14_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot14_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot14_2019 = lCIWDelLagoElMiradorPivot14_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot14_2019 = lFirstTitleIdDelLagoElMiradorPivot14_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot14_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot14_2019;
                        lTitleIdDelLagoElMiradorPivot14_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot14_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot14_2019 - lFirstTitleIdDelLagoElMiradorPivot14_2019) % (lTotalTitlesDelLagoElMiradorPivot14_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot14_2019 = lFirstTitleIdDelLagoElMiradorPivot14_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 15 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador15
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador15
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador15)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot15_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot15_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot15_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot15_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot15 2019
                    var lCIWDelLagoElMiradorPivot15_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot15_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot15_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot15_2019.HydricBalance = lCIWDelLagoElMiradorPivot15_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot15_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot15_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot15_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot15_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot15_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot15_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot15_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot15_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot15_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot15_2019 = lCIWDelLagoElMiradorPivot15_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot15_2019 = lFirstTitleIdDelLagoElMiradorPivot15_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot15_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot15_2019;
                        lTitleIdDelLagoElMiradorPivot15_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot15_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot15_2019 - lFirstTitleIdDelLagoElMiradorPivot15_2019) % (lTotalTitlesDelLagoElMiradorPivot15_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot15_2019 = lFirstTitleIdDelLagoElMiradorPivot15_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot Chaja 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMiradorChaja1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMiradorChaja1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMiradorChaja1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivotChaja1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivotChaja1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivotChaja1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivotChaja1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador PivotChaja1 2019
                    var lCIWDelLagoElMiradorPivotChaja1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivotChaja1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivotChaja1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivotChaja1_2019.HydricBalance = lCIWDelLagoElMiradorPivotChaja1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivotChaja1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivotChaja1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivotChaja1_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivotChaja1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivotChaja1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivotChaja1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivotChaja1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivotChaja1_2019 = (from title in context.Titles
                                                                          where title.Name == "DDS"
                                                                             && title.Daily == false
                                                                             && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivotChaja1_2019.CropIrrigationWeatherId
                                                                          select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivotChaja1_2019 = lCIWDelLagoElMiradorPivotChaja1_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivotChaja1_2019 = lFirstTitleIdDelLagoElMiradorPivotChaja1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivotChaja1_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivotChaja1_2019;
                        lTitleIdDelLagoElMiradorPivotChaja1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivotChaja1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivotChaja1_2019 - lFirstTitleIdDelLagoElMiradorPivotChaja1_2019) % (lTotalTitlesDelLagoElMiradorPivotChaja1_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivotChaja1_2019 = lFirstTitleIdDelLagoElMiradorPivotChaja1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot Chaja 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMiradorChaja2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMiradorChaja2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMiradorChaja2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivotChaja2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivotChaja2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivotChaja2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivotChaja2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador PivotChaja2 2019
                    var lCIWDelLagoElMiradorPivotChaja2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivotChaja2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivotChaja2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivotChaja2_2019.HydricBalance = lCIWDelLagoElMiradorPivotChaja2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivotChaja2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivotChaja2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivotChaja2_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivotChaja2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivotChaja2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivotChaja2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivotChaja2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivotChaja2_2019 = (from title in context.Titles
                                                                          where title.Name == "DDS"
                                                                             && title.Daily == false
                                                                             && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivotChaja2_2019.CropIrrigationWeatherId
                                                                          select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivotChaja2_2019 = lCIWDelLagoElMiradorPivotChaja2_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivotChaja2_2019 = lFirstTitleIdDelLagoElMiradorPivotChaja2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivotChaja2_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivotChaja2_2019;
                        lTitleIdDelLagoElMiradorPivotChaja2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivotChaja2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivotChaja2_2019 - lFirstTitleIdDelLagoElMiradorPivotChaja2_2019) % (lTotalTitlesDelLagoElMiradorPivotChaja2_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivotChaja2_2019 = lFirstTitleIdDelLagoElMiradorPivotChaja2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_DelLagoElMirador_2019b;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_DelLagoElMirador_2019b;
#if false
                    #region Del Lago - El Mirador Pivot 1b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador1b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador1b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador1b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot1b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot1b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot1b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot1b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot1b 2019
                    var lCIWDelLagoElMiradorPivot1b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot1b,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot1b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot1b_2019.HydricBalance = lCIWDelLagoElMiradorPivot1b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot1b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot1b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot1b_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot1b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot1b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot1b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot1b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot1b_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot1b_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot1b_2019 = lCIWDelLagoElMiradorPivot1b_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot1b_2019 = lFirstTitleIdDelLagoElMiradorPivot1b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot1b_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot1b_2019;
                        lTitleIdDelLagoElMiradorPivot1b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot1b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot1b_2019 - lFirstTitleIdDelLagoElMiradorPivot1b_2019) % (lTotalTitlesDelLagoElMiradorPivot1b_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot1b_2019 = lFirstTitleIdDelLagoElMiradorPivot1b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 2b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador2b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador2b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador2b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot2b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot2b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot2b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot2b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot2b 2019
                    var lCIWDelLagoElMiradorPivot2b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot2b,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot2b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot2b_2019.HydricBalance = lCIWDelLagoElMiradorPivot2b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot2b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot2b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot2b_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot2b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot2b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot2b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot2b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot2b_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot2b_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot2b_2019 = lCIWDelLagoElMiradorPivot2b_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot2b_2019 = lFirstTitleIdDelLagoElMiradorPivot2b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot2b_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot2b_2019;
                        lTitleIdDelLagoElMiradorPivot2b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot2b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot2b_2019 - lFirstTitleIdDelLagoElMiradorPivot2b_2019) % (lTotalTitlesDelLagoElMiradorPivot2b_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot2b_2019 = lFirstTitleIdDelLagoElMiradorPivot2b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 3b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador3b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador3b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador3b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot3b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot3b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot3b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot3b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot3b 2019
                    var lCIWDelLagoElMiradorPivot3b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot3b,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot3b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot3b_2019.HydricBalance = lCIWDelLagoElMiradorPivot3b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot3b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot3b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot3b_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot3b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot3b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot3b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot3b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot3b_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot3b_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot3b_2019 = lCIWDelLagoElMiradorPivot3b_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot3b_2019 = lFirstTitleIdDelLagoElMiradorPivot3b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot3b_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot3b_2019;
                        lTitleIdDelLagoElMiradorPivot3b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot3b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot3b_2019 - lFirstTitleIdDelLagoElMiradorPivot3b_2019) % (lTotalTitlesDelLagoElMiradorPivot3b_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot3b_2019 = lFirstTitleIdDelLagoElMiradorPivot3b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Del Lago - El Mirador Pivot 4b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDelLagoElMirador
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDelLagoElMirador4b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilDelLagoElMirador4b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotDelLagoElMirador4b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_DelLagoElMiradorPivot4b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_DelLagoElMiradorPivot4b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot4b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_DelLagoElMiradorPivot4b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW DelLago ElMirador Pivot4b 2019
                    var lCIWDelLagoElMiradorPivot4b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherDelLagoElMiradorPivot4b,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWDelLagoElMiradorPivot4b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWDelLagoElMiradorPivot4b_2019.HydricBalance = lCIWDelLagoElMiradorPivot4b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWDelLagoElMiradorPivot4b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWDelLagoElMiradorPivot4b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWDelLagoElMiradorPivot4b_2019.Titles)
                    {
                        var lTitlesDelLagoElMiradorPivot4b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot4b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWDelLagoElMiradorPivot4b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesDelLagoElMiradorPivot4b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdDelLagoElMiradorPivot4b_2019 = (from title in context.Titles
                                                                      where title.Name == "DDS"
                                                                         && title.Daily == false
                                                                         && title.CropIrrigationWeatherId == lCIWDelLagoElMiradorPivot4b_2019.CropIrrigationWeatherId
                                                                      select title.TitleId).FirstOrDefault();
                    long lTotalTitlesDelLagoElMiradorPivot4b_2019 = lCIWDelLagoElMiradorPivot4b_2019.Titles.Count();
                    long lTitleIdDelLagoElMiradorPivot4b_2019 = lFirstTitleIdDelLagoElMiradorPivot4b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWDelLagoElMiradorPivot4b_2019.Messages)
                    {
                        item.TitleId = lTitleIdDelLagoElMiradorPivot4b_2019;
                        lTitleIdDelLagoElMiradorPivot4b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWDelLagoElMiradorPivot4b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdDelLagoElMiradorPivot4b_2019 - lFirstTitleIdDelLagoElMiradorPivot4b_2019) % (lTotalTitlesDelLagoElMiradorPivot4b_2019) == 0)
                        {
                            lTitleIdDelLagoElMiradorPivot4b_2019 = lFirstTitleIdDelLagoElMiradorPivot4b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
                }
                #endregion
                #region GMO - La Palma
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOLaPalma)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_GMOLaPalma_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_GMOLaPalma_2019;

                    Console.Write(" GMO - La Palma | ");

                    #region GMO - La Palma Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGMOLaPalma1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOLaPalmaPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOLaPalmaPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot1 2019
                    var lCIWGMOLaPalmaPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot1_2019.HydricBalance = lCIWGMOLaPalmaPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot1_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot1_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot1_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot1_2019 = lCIWGMOLaPalmaPivot1_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot1_2019 = lFirstTitleIdGMOLaPalmaPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot1_2019;
                        lTitleIdGMOLaPalmaPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot1_2019 - lFirstTitleIdGMOLaPalmaPivot1_2019) % (lTotalTitlesGMOLaPalmaPivot1_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot1_2019 = lFirstTitleIdGMOLaPalmaPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOLaPalmaPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOLaPalmaPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 2 2019
                    var lCIWGMOLaPalmaPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot2_2019.HydricBalance = lCIWGMOLaPalmaPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot2_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot2_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot2_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot2_2019 = lCIWGMOLaPalmaPivot2_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot2_2019 = lFirstTitleIdGMOLaPalmaPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot2_2019;
                        lTitleIdGMOLaPalmaPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot2_2019 - lFirstTitleIdGMOLaPalmaPivot2_2019) % (lTotalTitlesGMOLaPalmaPivot2_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot2_2019 = lFirstTitleIdGMOLaPalmaPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOLaPalmaPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOLaPalmaPivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 3 2019
                    var lCIWGMOLaPalmaPivot3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot3_2019.HydricBalance = lCIWGMOLaPalmaPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot3_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot3_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot3_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot3_2019 = lCIWGMOLaPalmaPivot3_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot3_2019 = lFirstTitleIdGMOLaPalmaPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot3_2019;
                        lTitleIdGMOLaPalmaPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot3_2019 - lFirstTitleIdGMOLaPalmaPivot3_2019) % (lTotalTitlesGMOLaPalmaPivot3_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot3_2019 = lFirstTitleIdGMOLaPalmaPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOLaPalmaPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOLaPalmaPivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 4 2019
                    var lCIWGMOLaPalmaPivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot4_2019.HydricBalance = lCIWGMOLaPalmaPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot4_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot4_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot4_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot4_2019 = lCIWGMOLaPalmaPivot4_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot4_2019 = lFirstTitleIdGMOLaPalmaPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot4_2019;
                        lTitleIdGMOLaPalmaPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot4_2019 - lFirstTitleIdGMOLaPalmaPivot4_2019) % (lTotalTitlesGMOLaPalmaPivot4_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot4_2019 = lFirstTitleIdGMOLaPalmaPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 1.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma1_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGMOLaPalma1_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma1_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOLaPalmaPivot1_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOLaPalmaPivot1_1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot1_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot1_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 1.1 2019
                    var lCIWGMOLaPalmaPivot1_1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot1_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot1_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot1_1_2019.HydricBalance = lCIWGMOLaPalmaPivot1_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot1_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot1_1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot1_1_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot1_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot1_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot1_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot1_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot1_1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot1_1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot1_1_2019 = lCIWGMOLaPalmaPivot1_1_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot1_1_2019 = lFirstTitleIdGMOLaPalmaPivot1_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot1_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot1_1_2019;
                        lTitleIdGMOLaPalmaPivot1_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot1_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot1_1_2019 - lFirstTitleIdGMOLaPalmaPivot1_1_2019) % (lTotalTitlesGMOLaPalmaPivot1_1_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot1_1_2019 = lFirstTitleIdGMOLaPalmaPivot1_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 2.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma2_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma2_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma2_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOLaPalmaPivot2_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOLaPalmaPivot2_1_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot2_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot2_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 2.1 2019
                    var lCIWGMOLaPalmaPivot2_1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot2_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot2_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot2_1_2019.HydricBalance = lCIWGMOLaPalmaPivot2_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot2_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot2_1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot2_1_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot2_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot2_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot2_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot2_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot2_1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot2_1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot2_1_2019 = lCIWGMOLaPalmaPivot2_1_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot2_1_2019 = lFirstTitleIdGMOLaPalmaPivot2_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot2_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot2_1_2019;
                        lTitleIdGMOLaPalmaPivot2_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot2_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot2_1_2019 - lFirstTitleIdGMOLaPalmaPivot2_1_2019) % (lTotalTitlesGMOLaPalmaPivot2_1_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot2_1_2019 = lFirstTitleIdGMOLaPalmaPivot2_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 3.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma3_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma3_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma3_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOLaPalmaPivot3_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOLaPalmaPivot3_1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot3_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot3_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 3.1 2019
                    var lCIWGMOLaPalmaPivot3_1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot3_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot3_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot3_1_2019.HydricBalance = lCIWGMOLaPalmaPivot3_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot3_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot3_1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot3_1_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot3_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot3_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot3_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot3_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot3_1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot3_1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot3_1_2019 = lCIWGMOLaPalmaPivot3_1_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot3_1_2019 = lFirstTitleIdGMOLaPalmaPivot3_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot3_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot3_1_2019;
                        lTitleIdGMOLaPalmaPivot3_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot3_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot3_1_2019 - lFirstTitleIdGMOLaPalmaPivot3_1_2019) % (lTotalTitlesGMOLaPalmaPivot3_1_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot3_1_2019 = lFirstTitleIdGMOLaPalmaPivot3_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - La Palma Pivot 4.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOLaPalma
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOLaPalma4_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOLaPalma4_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOLaPalma4_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOLaPalmaPivot4_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOLaPalmaPivot4_1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot4_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOLaPalmaPivot4_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO La Palma Pivot 4.1 2019
                    var lCIWGMOLaPalmaPivot4_1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOLaPalmaPivot4_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOLaPalmaPivot4_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOLaPalmaPivot4_1_2019.HydricBalance = lCIWGMOLaPalmaPivot4_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOLaPalmaPivot4_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOLaPalmaPivot4_1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOLaPalmaPivot4_1_2019.Titles)
                    {
                        var lTitlesGMOLaPalmaPivot4_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOLaPalmaPivot4_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOLaPalmaPivot4_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOLaPalmaPivot4_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOLaPalmaPivot4_1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOLaPalmaPivot4_1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOLaPalmaPivot4_1_2019 = lCIWGMOLaPalmaPivot4_1_2019.Titles.Count();
                    long lTitleIdGMOLaPalmaPivot4_1_2019 = lFirstTitleIdGMOLaPalmaPivot4_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOLaPalmaPivot4_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOLaPalmaPivot4_1_2019;
                        lTitleIdGMOLaPalmaPivot4_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOLaPalmaPivot4_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOLaPalmaPivot4_1_2019 - lFirstTitleIdGMOLaPalmaPivot4_1_2019) % (lTotalTitlesGMOLaPalmaPivot4_1_2019) == 0)
                        {
                            lTitleIdGMOLaPalmaPivot4_1_2019 = lFirstTitleIdGMOLaPalmaPivot4_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                }
                #endregion
                #region GMO - El Tacuru

                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOElTacuru)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_GMOElTacuru_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_GMOElTacuru_2019;

                    Console.Write(" GMO - El Tacuru | ");

                    #region GMO - El Tacuru Pivot 1a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieAlfalfaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieAlfalfaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieAlfalfaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieAlfalfaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieAlfalfaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru1a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGMOElTacuru1a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru1a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_AlfalfaNorth_GMOElTacuruPivot1a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_AlfalfaNorth_GMOElTacuruPivot1a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot1a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot1a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot1a 2019
                    var lCIWGMOElTacuruPivot1a_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot1a,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot1a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot1a_2019.HydricBalance = lCIWGMOElTacuruPivot1a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot1a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot1a_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot1a_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot1a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot1a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot1a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot1a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot1a_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot1a_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot1a_2019 = lCIWGMOElTacuruPivot1a_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot1a_2019 = lFirstTitleIdGMOElTacuruPivot1a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot1a_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot1a_2019;
                        lTitleIdGMOElTacuruPivot1a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot1a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot1a_2019 - lFirstTitleIdGMOElTacuruPivot1a_2019) % (lTotalTitlesGMOElTacuruPivot1a_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot1a_2019 = lFirstTitleIdGMOElTacuruPivot1a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 1b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru1b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGMOElTacuru1b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru1b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot1b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot1b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot1b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot1b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot1b 2019
                    var lCIWGMOElTacuruPivot1b_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot1b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot1b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot1b_2019.HydricBalance = lCIWGMOElTacuruPivot1b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot1b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot1b_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot1b_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot1b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot1b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot1b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot1b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot1b_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot1b_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot1b_2019 = lCIWGMOElTacuruPivot1b_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot1b_2019 = lFirstTitleIdGMOElTacuruPivot1b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot1b_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot1b_2019;
                        lTitleIdGMOElTacuruPivot1b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot1b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot1b_2019 - lFirstTitleIdGMOElTacuruPivot1b_2019) % (lTotalTitlesGMOElTacuruPivot1b_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot1b_2019 = lFirstTitleIdGMOElTacuruPivot1b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 2a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru2a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru2a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru2a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOElTacuruPivot2a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOElTacuruPivot2a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot2a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot2a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 2a 2019
                    var lCIWGMOElTacuruPivot2a_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot2a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot2a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot2a_2019.HydricBalance = lCIWGMOElTacuruPivot2a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot2a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot2a_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot2a_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot2a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot2a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot2a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot2a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot2a_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot2a_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot2a_2019 = lCIWGMOElTacuruPivot2a_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot2a_2019 = lFirstTitleIdGMOElTacuruPivot2a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot2a_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot2a_2019;
                        lTitleIdGMOElTacuruPivot2a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot2a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot2a_2019 - lFirstTitleIdGMOElTacuruPivot2a_2019) % (lTotalTitlesGMOElTacuruPivot2a_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot2a_2019 = lFirstTitleIdGMOElTacuruPivot2a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 2b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru2b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru2b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru2b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot2b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot2b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot2b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot2b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 2b 2019
                    var lCIWGMOElTacuruPivot2b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot2b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot2b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot2b_2019.HydricBalance = lCIWGMOElTacuruPivot2b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot2b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot2b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot2b_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot2b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot2b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot2b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot2b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot2b_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot2b_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot2b_2019 = lCIWGMOElTacuruPivot2b_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot2b_2019 = lFirstTitleIdGMOElTacuruPivot2b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot2b_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot2b_2019;
                        lTitleIdGMOElTacuruPivot2b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot2b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot2b_2019 - lFirstTitleIdGMOElTacuruPivot2b_2019) % (lTotalTitlesGMOElTacuruPivot2b_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot2b_2019 = lFirstTitleIdGMOElTacuruPivot2b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 3a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru3a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru3a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru3a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOElTacuruPivot3a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOElTacuruPivot3a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot3a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot3a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 3a 2019
                    var lCIWGMOElTacuruPivot3a_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot3a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot3a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot3a_2019.HydricBalance = lCIWGMOElTacuruPivot3a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot3a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot3a_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot3a_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot3a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot3a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot3a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot3a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot3a_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot3a_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot3a_2019 = lCIWGMOElTacuruPivot3a_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot3a_2019 = lFirstTitleIdGMOElTacuruPivot3a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot3a_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot3a_2019;
                        lTitleIdGMOElTacuruPivot3a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot3a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot3a_2019 - lFirstTitleIdGMOElTacuruPivot3a_2019) % (lTotalTitlesGMOElTacuruPivot3a_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot3a_2019 = lFirstTitleIdGMOElTacuruPivot3a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 3b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru3b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru3b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru3b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot3b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot3b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot3b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot3b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 3b 2019
                    var lCIWGMOElTacuruPivot3b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot3b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot3b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot3b_2019.HydricBalance = lCIWGMOElTacuruPivot3b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot3b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot3b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot3b_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot3b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot3b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot3b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot3b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot3b_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot3b_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot3b_2019 = lCIWGMOElTacuruPivot3b_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot3b_2019 = lFirstTitleIdGMOElTacuruPivot3b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot3b_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot3b_2019;
                        lTitleIdGMOElTacuruPivot3b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot3b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot3b_2019 - lFirstTitleIdGMOElTacuruPivot3b_2019) % (lTotalTitlesGMOElTacuruPivot3b_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot3b_2019 = lFirstTitleIdGMOElTacuruPivot3b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 4 2019
                    var lCIWGMOElTacuruPivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot4_2019.HydricBalance = lCIWGMOElTacuruPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot4_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot4_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot4_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot4_2019 = lCIWGMOElTacuruPivot4_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot4_2019 = lFirstTitleIdGMOElTacuruPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot4_2019;
                        lTitleIdGMOElTacuruPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot4_2019 - lFirstTitleIdGMOElTacuruPivot4_2019) % (lTotalTitlesGMOElTacuruPivot4_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot4_2019 = lFirstTitleIdGMOElTacuruPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 5 2019
                    var lCIWGMOElTacuruPivot5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot5_2019.HydricBalance = lCIWGMOElTacuruPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot5_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot5_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot5_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot5_2019 = lCIWGMOElTacuruPivot5_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot5_2019 = lFirstTitleIdGMOElTacuruPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot5_2019;
                        lTitleIdGMOElTacuruPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot5_2019 - lFirstTitleIdGMOElTacuruPivot5_2019) % (lTotalTitlesGMOElTacuruPivot5_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot5_2019 = lFirstTitleIdGMOElTacuruPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 8 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru8
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru8
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru8)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_GMOElTacuruPivot8_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_GMOElTacuruPivot8_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot8_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot8_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 8 2019
                    var lCIWGMOElTacuruPivot8_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot8_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot8_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot8_2019.HydricBalance = lCIWGMOElTacuruPivot8_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot8_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot8_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot8_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot8_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot8_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot8_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot8_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot8_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot8_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot8_2019 = lCIWGMOElTacuruPivot8_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot8_2019 = lFirstTitleIdGMOElTacuruPivot8_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot8_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot8_2019;
                        lTitleIdGMOElTacuruPivot8_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot8_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot8_2019 - lFirstTitleIdGMOElTacuruPivot8_2019) % (lTotalTitlesGMOElTacuruPivot8_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot8_2019 = lFirstTitleIdGMOElTacuruPivot8_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 9 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru9
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru9
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru9)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot9_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot9_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot9_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot9_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 9 2019
                    var lCIWGMOElTacuruPivot9_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot9_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot9_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot9_2019.HydricBalance = lCIWGMOElTacuruPivot9_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot9_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot9_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot9_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot9_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot9_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot9_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot9_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot9_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot9_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot9_2019 = lCIWGMOElTacuruPivot9_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot9_2019 = lFirstTitleIdGMOElTacuruPivot9_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot9_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot9_2019;
                        lTitleIdGMOElTacuruPivot9_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot9_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot9_2019 - lFirstTitleIdGMOElTacuruPivot9_2019) % (lTotalTitlesGMOElTacuruPivot9_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot9_2019 = lFirstTitleIdGMOElTacuruPivot9_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region GMO - El Tacuru Pivot 10 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGMOElTacuru
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGMOElTacuru10
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotGMOElTacuru10
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGMOElTacuru10)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_GMOElTacuruPivot10_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_GMOElTacuruPivot10_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot10_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GMOElTacuruPivot10_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW GMO El Tacuru Pivot 10 2019
                    var lCIWGMOElTacuruPivot10_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGMOElTacuruPivot10_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGMOElTacuruPivot10_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGMOElTacuruPivot10_2019.HydricBalance = lCIWGMOElTacuruPivot10_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGMOElTacuruPivot10_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGMOElTacuruPivot10_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGMOElTacuruPivot10_2019.Titles)
                    {
                        var lTitlesGMOElTacuruPivot10_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGMOElTacuruPivot10_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGMOElTacuruPivot10_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGMOElTacuruPivot10_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGMOElTacuruPivot10_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWGMOElTacuruPivot10_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGMOElTacuruPivot10_2019 = lCIWGMOElTacuruPivot10_2019.Titles.Count();
                    long lTitleIdGMOElTacuruPivot10_2019 = lFirstTitleIdGMOElTacuruPivot10_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGMOElTacuruPivot10_2019.Messages)
                    {
                        item.TitleId = lTitleIdGMOElTacuruPivot10_2019;
                        lTitleIdGMOElTacuruPivot10_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGMOElTacuruPivot10_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGMOElTacuruPivot10_2019 - lFirstTitleIdGMOElTacuruPivot10_2019) % (lTotalTitlesGMOElTacuruPivot10_2019) == 0)
                        {
                            lTitleIdGMOElTacuruPivot10_2019 = lFirstTitleIdGMOElTacuruPivot10_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#if true
#endif
                }
                #endregion
                #region Tres Marias
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.TresMarias)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_TresMarias_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_TresMarias_2019;

                    Console.Write(" Tres Marias | ");

#if false
                    #region Tres Marias Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmTresMarias
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotTresMarias1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilTresMarias1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotTresMarias1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_TresMariasPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_TresMariasPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Tres Marias Pivot1 2019
                    var lCIWTresMariasPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherTresMariasPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWTresMariasPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWTresMariasPivot1_2019.HydricBalance = lCIWTresMariasPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWTresMariasPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWTresMariasPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWTresMariasPivot1_2019.Titles)
                    {
                        var lTitlesTresMariasPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWTresMariasPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWTresMariasPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesTresMariasPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdTresMariasPivot1_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWTresMariasPivot1_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesTresMariasPivot1_2019 = lCIWTresMariasPivot1_2019.Titles.Count();
                    long lTitleIdTresMariasPivot1_2019 = lFirstTitleIdTresMariasPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWTresMariasPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdTresMariasPivot1_2019;
                        lTitleIdTresMariasPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWTresMariasPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdTresMariasPivot1_2019 - lFirstTitleIdTresMariasPivot1_2019) % (lTotalTitlesTresMariasPivot1_2019) == 0)
                        {
                            lTitleIdTresMariasPivot1_2019 = lFirstTitleIdTresMariasPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Tres Marias Pivot 2 2019
                    //#region Farm //////////////////////////////////////////////////////////////////////
                    //lFarm = (from farm in context.Farms
                    //         where farm.Name == Utils.NameFarmTresMarias
                    //         select farm).FirstOrDefault();
                    //lWeatherStationMain = (from ws in context.WeatherStations
                    //                       where ws.Name == lWeatherStationMainName
                    //                       select ws).FirstOrDefault();
                    //lWeatherStationAlternative = (from ws in context.WeatherStations
                    //                              where ws.Name == lWeatherStationAlternativeName
                    //                              select ws).FirstOrDefault();
                    //lEffectiveRainList = (from effectiverain in context.EffectiveRains
                    //                      where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                    //                      select effectiverain)
                    //                     .ToList<EffectiveRain>();
                    //#endregion
                    //#region Crop //////////////////////////////////////////////////////////////////////
                    //lSpecie = (from sp in context.Species
                    //           where sp.Name == Utils.NameSpecieCornSouthShort
                    //           select sp).FirstOrDefault();
                    //lCrop = (from crop in context.Crops
                    //         where crop.Name == Utils.NameSpecieCornSouthShort
                    //         select crop).FirstOrDefault();
                    //lCropCoefficient = (from cc in context.CropCoefficients
                    //                    where cc.Name == Utils.NameSpecieCornSouthShort
                    //                    select cc).FirstOrDefault();
                    //lPhenologicalStages = (from ps in context.PhenologicalStages
                    //                       where ps.SpecieId == lSpecie.SpecieId
                    //                       select ps).ToList<PhenologicalStage>();
                    //lKCList = (from cc in context.CropCoefficients
                    //           where cc.Name == Utils.NameSpecieCornSouthShort
                    //           select cc.KCList)
                    //                     .FirstOrDefault();
                    //lCropInformationByDate = (from cid in context.CropInformationByDates
                    //                          where cid.Name == Utils.NameSpecieCornSouthShort
                    //                          select cid).FirstOrDefault();
                    //#endregion
                    //#region Agriculture //////////////////////////////////////////////////////////////////////
                    //lIrrigationUnit = (from iu in context.Pivots
                    //                   where iu.Name == Utils.NamePivotTresMarias2
                    //                   select iu).FirstOrDefault();
                    //lSoil = (from soil in context.Soils
                    //         where soil.Name == Utils.NamePivotTresMarias2
                    //         select soil).FirstOrDefault();
                    //lHorizonList = (from horizon in context.Horizons
                    //                where horizon.Name.StartsWith(Utils.NamePivotTresMarias2)
                    //                select horizon)
                    //                .ToList<Horizon>();
                    //lSowingDate = DataEntry2019.SowingDate_CornSouth_TresMariasPivot2_2019;
                    //lHarvestDate = DataEntry2019.HarvestDate_CornSouth_TresMariasPivot2_2019;
                    //lCropDate = Program.DateOfReference;
                    //if (DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot2_2019 == 0)
                    //{
                    //    lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    //}
                    //else
                    //{
                    //    lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot2_2019;
                    //}
                    //#endregion
                    //#region Weather Data
                    //lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                        join weatherstation in context.WeatherStations
                    //                        on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                        where (weatherdata.Date >= lSowingDate &&
                    //                                weatherdata.Date <= lHarvestDate) &&
                    //                                weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                    //                        select weatherdata).ToList<WeatherData>();
                    //lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                               join weatherstation in context.WeatherStations
                    //                               on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                               where (weatherdata.Date >= lSowingDate &&
                    //                                    weatherdata.Date <= lHarvestDate) &&
                    //                                    weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                    //                               select weatherdata).ToList<WeatherData>();
                    //#endregion
                    //#region New CIW Tres Marias Pivot 2 2019
                    //var lCIWTresMariasPivot2_2019 = new CropIrrigationWeather
                    //{
                    //    CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherTresMariasPivot2_S1920,
                    //    CropId = lCrop.CropId,
                    //    Crop = lCrop,
                    //    IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                    //    IrrigationUnit = lIrrigationUnit,

                    //    MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                    //    MainWeatherStation = lWeatherStationMain,

                    //    WeatherEventType = Utils.WeatherEventType.LaNinia,

                    //    AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                    //    AlternativeWeatherStation = lWeatherStationAlternative,

                    //    PositionId = lFarm.PositionId,
                    //    SoilId = lSoil.SoilId,
                    //    Soil = lSoil,
                    
                    //    MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                    //                             Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                    //                                      Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                    //    AdjustableIrrigationQuantity = true,
                    //    PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                    //    //Set the initial Phenological Stage for the Crop
                    //    PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                    //    PhenologicalStage = lCrop.PhenologicalStageList[0],

                    //    SowingDate = lSowingDate,
                    //    HarvestDate = lHarvestDate,
                    //    CropDate = lCropDate,
                    //    DaysForHydricBalanceUnchangableAfterSowing = 0,

                    //    HydricBalance = 0,

                    //    CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                    //    CropInformationByDate = lCropInformationByDate,

                    //};
                    //context.SaveChanges();

                    ////Set Calculus Method for Phenological Adjustment
                    //lCIWTresMariasPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    ////Get Initial Hydric Balance
                    //lCIWTresMariasPivot2_2019.HydricBalance = lCIWTresMariasPivot2_2019.GetInitialHydricBalance();
                    ////Create the initial registry
                    //lCIWTresMariasPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    //context.CropIrrigationWeathers.Add(lCIWTresMariasPivot2_2019);
                    //context.SaveChanges();
                    //#endregion
                    //#region Save Titles for print
                    //foreach (var item in lCIWTresMariasPivot2_2019.Titles)
                    //{
                    //    var lTitlesTresMariasPivot2_2019 = new Title
                    //    {
                    //        CropIrrigationWeatherId = lCIWTresMariasPivot2_2019.CropIrrigationWeatherId,
                    //        CropIrrigationWeather = lCIWTresMariasPivot2_2019,
                    //        Daily = false,
                    //        Name = item.Name,
                    //        Abbreviation = item.Abbreviation,
                    //        Description = item.Description,
                    //    };
                    //    context.Titles.Add(lTitlesTresMariasPivot2_2019);
                    //}
                    //context.SaveChanges();
                    //long lFirstTitleIdTresMariasPivot2_2019 = (from title in context.Titles
                    //                                            where title.Name == "DDS"
                    //                                               && title.Daily == false
                    //                                               && title.CropIrrigationWeatherId == lCIWTresMariasPivot2_2019.CropIrrigationWeatherId
                    //                                            select title.TitleId).FirstOrDefault();
                    //long lTotalTitlesTresMariasPivot2_2019 = lCIWTresMariasPivot2_2019.Titles.Count();
                    //long lTitleIdTresMariasPivot2_2019 = lFirstTitleIdTresMariasPivot2_2019;
                    //#endregion
                    //#region Update Messages Ids
                    //foreach (var item in lCIWTresMariasPivot2_2019.Messages)
                    //{
                    //    item.TitleId = lTitleIdTresMariasPivot2_2019;
                    //    lTitleIdTresMariasPivot2_2019 += 1;
                    //    item.CropIrrigationWeatherId = lCIWTresMariasPivot2_2019.CropIrrigationWeatherId;
                    //    if ((lTitleIdTresMariasPivot2_2019 - lFirstTitleIdTresMariasPivot2_2019) % (lTotalTitlesTresMariasPivot2_2019) == 0)
                    //    {
                    //        lTitleIdTresMariasPivot2_2019 = lFirstTitleIdTresMariasPivot2_2019;
                    //    }
                    //}
                    //context.SaveChanges();
                    //#endregion
                    #endregion
                    #region Tres Marias Pivot 3 2019
                    //#region Farm //////////////////////////////////////////////////////////////////////
                    //lFarm = (from farm in context.Farms
                    //         where farm.Name == Utils.NameFarmTresMarias
                    //         select farm).FirstOrDefault();
                    //lWeatherStationMain = (from ws in context.WeatherStations
                    //                       where ws.Name == lWeatherStationMainName
                    //                       select ws).FirstOrDefault();
                    //lWeatherStationAlternative = (from ws in context.WeatherStations
                    //                              where ws.Name == lWeatherStationAlternativeName
                    //                              select ws).FirstOrDefault();
                    //lEffectiveRainList = (from effectiverain in context.EffectiveRains
                    //                      where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                    //                      select effectiverain)
                    //                     .ToList<EffectiveRain>();
                    //#endregion
                    //#region Crop //////////////////////////////////////////////////////////////////////
                    //lSpecie = (from sp in context.Species
                    //           where sp.Name == Utils.NameSpecieCornSouthShort
                    //           select sp).FirstOrDefault();
                    //lCrop = (from crop in context.Crops
                    //         where crop.Name == Utils.NameSpecieCornSouthShort
                    //         select crop).FirstOrDefault();
                    //lCropCoefficient = (from cc in context.CropCoefficients
                    //                    where cc.Name == Utils.NameSpecieCornSouthShort
                    //                    select cc).FirstOrDefault();
                    //lPhenologicalStages = (from ps in context.PhenologicalStages
                    //                       where ps.SpecieId == lSpecie.SpecieId
                    //                       select ps).ToList<PhenologicalStage>();
                    //lKCList = (from cc in context.CropCoefficients
                    //           where cc.Name == Utils.NameSpecieCornSouthShort
                    //           select cc.KCList)
                    //                     .FirstOrDefault();
                    //lCropInformationByDate = (from cid in context.CropInformationByDates
                    //                          where cid.Name == Utils.NameSpecieCornSouthShort
                    //                          select cid).FirstOrDefault();
                    //#endregion
                    //#region Agriculture //////////////////////////////////////////////////////////////////////
                    //lIrrigationUnit = (from iu in context.Pivots
                    //                   where iu.Name == Utils.NamePivotTresMarias3
                    //                   select iu).FirstOrDefault();
                    //lSoil = (from soil in context.Soils
                    //         where soil.Name == Utils.NamePivotTresMarias3
                    //         select soil).FirstOrDefault();
                    //lHorizonList = (from horizon in context.Horizons
                    //                where horizon.Name.StartsWith(Utils.NamePivotTresMarias3)
                    //                select horizon)
                    //                .ToList<Horizon>();
                    //lSowingDate = DataEntry2019.SowingDate_CornSouth_TresMariasPivot3_2019;
                    //lHarvestDate = DataEntry2019.HarvestDate_CornSouth_TresMariasPivot3_2019;
                    //lCropDate = DateTime.Now;
                    //if (DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot3_2019 == 0)
                    //{
                    //    lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    //}
                    //else
                    //{
                    //    lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot3_2019;
                    //}
                    //#endregion
                    //#region Weather Data
                    //lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                        join weatherstation in context.WeatherStations
                    //                        on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                        where (weatherdata.Date >= lSowingDate &&
                    //                                weatherdata.Date <= lHarvestDate) &&
                    //                                weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                    //                        select weatherdata).ToList<WeatherData>();
                    //lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                               join weatherstation in context.WeatherStations
                    //                               on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                               where (weatherdata.Date >= lSowingDate &&
                    //                                    weatherdata.Date <= lHarvestDate) &&
                    //                                    weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                    //                               select weatherdata).ToList<WeatherData>();
                    //#endregion
                    //#region New CIW Tres Marias Pivot 3 2019
                    //var lCIWTresMariasPivot3_2019 = new CropIrrigationWeather
                    //{
                    //    CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherTresMariasPivot3_S1920,
                    //    CropId = lCrop.CropId,
                    //    Crop = lCrop,
                    //    IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                    //    IrrigationUnit = lIrrigationUnit,
                    //    MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                    //    MainWeatherStation = lWeatherStationMain,

                    //    WeatherEventType = Utils.WeatherEventType.LaNinia,

                    //    AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                    //    AlternativeWeatherStation = lWeatherStationAlternative,
                    //    PositionId = lFarm.PositionId,
                    //    SoilId = lSoil.SoilId,
                    //    Soil = lSoil,
                    
                    //    MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                    //                             Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                    //                                      Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                    //    AdjustableIrrigationQuantity = true,
                    //    PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                    //    //Set the initial Phenological Stage for the Crop
                    //    PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                    //    PhenologicalStage = lCrop.PhenologicalStageList[0],

                    //    SowingDate = lSowingDate,
                    //    HarvestDate = lHarvestDate,
                    //    CropDate = lCropDate,
                    //    DaysForHydricBalanceUnchangableAfterSowing = 0,

                    //    HydricBalance = 0,

                    //    CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                    //    CropInformationByDate = lCropInformationByDate,

                    //};
                    //context.SaveChanges();

                    ////Set Calculus Method for Phenological Adjustment
                    //lCIWTresMariasPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    ////Get Initial Hydric Balance
                    //lCIWTresMariasPivot3_2019.HydricBalance = lCIWTresMariasPivot3_2019.GetInitialHydricBalance();
                    ////Create the initial registry
                    //lCIWTresMariasPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    //context.CropIrrigationWeathers.Add(lCIWTresMariasPivot3_2019);
                    //context.SaveChanges();
                    //#endregion
                    //#region Save Titles for print
                    //foreach (var item in lCIWTresMariasPivot3_2019.Titles)
                    //{
                    //    var lTitlesTresMariasPivot3_2019 = new Title
                    //    {
                    //        CropIrrigationWeatherId = lCIWTresMariasPivot3_2019.CropIrrigationWeatherId,
                    //        CropIrrigationWeather = lCIWTresMariasPivot3_2019,
                    //        Daily = false,
                    //        Name = item.Name,
                    //        Abbreviation = item.Abbreviation,
                    //        Description = item.Description,
                    //    };
                    //    context.Titles.Add(lTitlesTresMariasPivot3_2019);
                    //}
                    //context.SaveChanges();
                    //long lFirstTitleIdTresMariasPivot3_2019 = (from title in context.Titles
                    //                                              where title.Name == "DDS"
                    //                                                 && title.Daily == false
                    //                                                 && title.CropIrrigationWeatherId == lCIWTresMariasPivot3_2019.CropIrrigationWeatherId
                    //                                              select title.TitleId).FirstOrDefault();
                    //long lTotalTitlesTresMariasPivot3_2019 = lCIWTresMariasPivot3_2019.Titles.Count();
                    //long lTitleIdTresMariasPivot3_2019 = lFirstTitleIdTresMariasPivot3_2019;
                    //#endregion
                    //#region Update Messages Ids
                    //foreach (var item in lCIWTresMariasPivot3_2019.Messages)
                    //{
                    //    item.TitleId = lTitleIdTresMariasPivot3_2019;
                    //    lTitleIdTresMariasPivot3_2019 += 1;
                    //    item.CropIrrigationWeatherId = lCIWTresMariasPivot3_2019.CropIrrigationWeatherId;
                    //    if ((lTitleIdTresMariasPivot3_2019 - lFirstTitleIdTresMariasPivot3_2019) % (lTotalTitlesTresMariasPivot3_2019) == 0)
                    //    {
                    //        lTitleIdTresMariasPivot3_2019 = lFirstTitleIdTresMariasPivot3_2019;
                    //    }
                    //}
                    //context.SaveChanges();
                    //#endregion
                    #endregion
                    #region Tres Marias Pivot 4 2019
                    //#region Farm //////////////////////////////////////////////////////////////////////
                    //lFarm = (from farm in context.Farms
                    //         where farm.Name == Utils.NameFarmTresMarias
                    //         select farm).FirstOrDefault();
                    //lWeatherStationMain = (from ws in context.WeatherStations
                    //                       where ws.Name == lWeatherStationMainName
                    //                       select ws).FirstOrDefault();
                    //lWeatherStationAlternative = (from ws in context.WeatherStations
                    //                              where ws.Name == lWeatherStationAlternativeName
                    //                              select ws).FirstOrDefault();
                    //lEffectiveRainList = (from effectiverain in context.EffectiveRains
                    //                      where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                    //                      select effectiverain)
                    //                     .ToList<EffectiveRain>();
                    //#endregion
                    //#region Crop //////////////////////////////////////////////////////////////////////
                    //lSpecie = (from sp in context.Species
                    //           where sp.Name == Utils.NameSpecieCornSouthShort
                    //           select sp).FirstOrDefault();
                    //lCrop = (from crop in context.Crops
                    //         where crop.Name == Utils.NameSpecieCornSouthShort
                    //         select crop).FirstOrDefault();
                    //lCropCoefficient = (from cc in context.CropCoefficients
                    //                    where cc.Name == Utils.NameSpecieCornSouthShort
                    //                    select cc).FirstOrDefault();
                    //lPhenologicalStages = (from ps in context.PhenologicalStages
                    //                       where ps.SpecieId == lSpecie.SpecieId
                    //                       select ps).ToList<PhenologicalStage>();
                    //lKCList = (from cc in context.CropCoefficients
                    //           where cc.Name == Utils.NameSpecieCornSouthShort
                    //           select cc.KCList)
                    //                     .FirstOrDefault();
                    //lCropInformationByDate = (from cid in context.CropInformationByDates
                    //                          where cid.Name == Utils.NameSpecieCornSouthShort
                    //                          select cid).FirstOrDefault();
                    //#endregion
                    //#region Agriculture //////////////////////////////////////////////////////////////////////
                    //lIrrigationUnit = (from iu in context.Pivots
                    //                   where iu.Name == Utils.NamePivotTresMarias4
                    //                   select iu).FirstOrDefault();
                    //lSoil = (from soil in context.Soils
                    //         where soil.Name == Utils.NamePivotTresMarias4
                    //         select soil).FirstOrDefault();
                    //lHorizonList = (from horizon in context.Horizons
                    //                where horizon.Name.StartsWith(Utils.NamePivotTresMarias4)
                    //                select horizon)
                    //                .ToList<Horizon>();
                    //lSowingDate = DataEntry2019.SowingDate_CornSouth_TresMariasPivot4_2019;
                    //lHarvestDate = DataEntry2019.HarvestDate_CornSouth_TresMariasPivot4_2019;
                    //lCropDate = DateTime.Now;
                    //if (DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot4_2019 == 0)
                    //{
                    //    lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    //}
                    //else
                    //{
                    //    lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_TresMariasPivot4_2019;
                    //}
                    //#endregion
                    //#region Weather Data
                    //lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                        join weatherstation in context.WeatherStations
                    //                        on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                        where (weatherdata.Date >= lSowingDate &&
                    //                                weatherdata.Date <= lHarvestDate) &&
                    //                                weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                    //                        select weatherdata).ToList<WeatherData>();
                    //lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                               join weatherstation in context.WeatherStations
                    //                               on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                               where (weatherdata.Date >= lSowingDate &&
                    //                                    weatherdata.Date <= lHarvestDate) &&
                    //                                    weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                    //                               select weatherdata).ToList<WeatherData>();
                    //#endregion
                    //#region New CIW Tres Marias Pivot 13.1 2019
                    //var lCIWTresMariasPivot4_2019 = new CropIrrigationWeather
                    //{
                    //    CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherTresMariasPivot4_S1920,
                    //    CropId = lCrop.CropId,
                    //    Crop = lCrop,
                    //    IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                    //    IrrigationUnit = lIrrigationUnit,
                    //    MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                    //    MainWeatherStation = lWeatherStationMain,

                    //    WeatherEventType = Utils.WeatherEventType.LaNinia,

                    //    AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                    //    AlternativeWeatherStation = lWeatherStationAlternative,
                    //    PositionId = lFarm.PositionId,
                    //    SoilId = lSoil.SoilId,
                    //    Soil = lSoil,
                    
                    //    MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                    //                             Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                    //                                      Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                    //    AdjustableIrrigationQuantity = true,
                    //    PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                    //    //Set the initial Phenological Stage for the Crop
                    //    PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                    //    PhenologicalStage = lCrop.PhenologicalStageList[0],

                    //    SowingDate = lSowingDate,
                    //    HarvestDate = lHarvestDate,
                    //    CropDate = lCropDate,
                    //    DaysForHydricBalanceUnchangableAfterSowing = 0,

                    //    HydricBalance = 0,

                    //    CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                    //    CropInformationByDate = lCropInformationByDate,

                    //};
                    //context.SaveChanges();

                    ////Set Calculus Method for Phenological Adjustment
                    //lCIWTresMariasPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    ////Get Initial Hydric Balance
                    //lCIWTresMariasPivot4_2019.HydricBalance = lCIWTresMariasPivot4_2019.GetInitialHydricBalance();
                    ////Create the initial registry
                    //lCIWTresMariasPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    //context.CropIrrigationWeathers.Add(lCIWTresMariasPivot4_2019);
                    //context.SaveChanges();
                    //#endregion
                    //#region Save Titles for print
                    //foreach (var item in lCIWTresMariasPivot4_2019.Titles)
                    //{
                    //    var lTitlesTresMariasPivot4_2019 = new Title
                    //    {
                    //        CropIrrigationWeatherId = lCIWTresMariasPivot4_2019.CropIrrigationWeatherId,
                    //        CropIrrigationWeather = lCIWTresMariasPivot4_2019,
                    //        Daily = false,
                    //        Name = item.Name,
                    //        Abbreviation = item.Abbreviation,
                    //        Description = item.Description,
                    //    };
                    //    context.Titles.Add(lTitlesTresMariasPivot4_2019);
                    //}
                    //context.SaveChanges();
                    //long lFirstTitleIdTresMariasPivot4_2019 = (from title in context.Titles
                    //                                               where title.Name == "DDS"
                    //                                                  && title.Daily == false
                    //                                                  && title.CropIrrigationWeatherId == lCIWTresMariasPivot4_2019.CropIrrigationWeatherId
                    //                                               select title.TitleId).FirstOrDefault();
                    //long lTotalTitlesTresMariasPivot4_2019 = lCIWTresMariasPivot4_2019.Titles.Count();
                    //long lTitleIdTresMariasPivot4_2019 = lFirstTitleIdTresMariasPivot4_2019;
                    //#endregion
                    //#region Update Messages Ids
                    //foreach (var item in lCIWTresMariasPivot4_2019.Messages)
                    //{
                    //    item.TitleId = lTitleIdTresMariasPivot4_2019;
                    //    lTitleIdTresMariasPivot4_2019 += 1;
                    //    item.CropIrrigationWeatherId = lCIWTresMariasPivot4_2019.CropIrrigationWeatherId;
                    //    if ((lTitleIdTresMariasPivot4_2019 - lFirstTitleIdTresMariasPivot4_2019) % (lTotalTitlesTresMariasPivot4_2019) == 0)
                    //    {
                    //        lTitleIdTresMariasPivot4_2019 = lFirstTitleIdTresMariasPivot4_2019;
                    //    }
                    //}
                    //context.SaveChanges();
                    //#endregion
                    #endregion
#endif
                }
                #endregion
                #region La Rinconada
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaRinconada)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_LaRinconada_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_LaRinconada_2019;

                    Console.Write(" La Rinconada | ");

#if false
                    #region La Rinconada Pivot 1 2019
                    //#region Farm //////////////////////////////////////////////////////////////////////
                    //lFarm = (from farm in context.Farms
                    //         where farm.Name == Utils.NameFarmLaRinconada
                    //         select farm).FirstOrDefault();
                    //lWeatherStationMain = (from ws in context.WeatherStations
                    //                       where ws.Name == lWeatherStationMainName
                    //                       select ws).FirstOrDefault();
                    //lWeatherStationAlternative = (from ws in context.WeatherStations
                    //                              where ws.Name == lWeatherStationAlternativeName
                    //                              select ws).FirstOrDefault();
                    //lEffectiveRainList = (from effectiverain in context.EffectiveRains
                    //                      where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                    //                      select effectiverain)
                    //                     .ToList<EffectiveRain>();
                    //#endregion
                    //#region Crop //////////////////////////////////////////////////////////////////////
                    //lSpecie = (from sp in context.Species
                    //           where sp.Name == Utils.NameSpecieSoyaNorthShort
                    //           select sp).FirstOrDefault();
                    //lCrop = (from crop in context.Crops
                    //         where crop.Name == Utils.NameSpecieSoyaNorthShort
                    //         select crop).FirstOrDefault();
                    //lCropCoefficient = (from cc in context.CropCoefficients
                    //                    where cc.Name == Utils.NameSpecieSoyaNorthShort
                    //                    select cc).FirstOrDefault();
                    //lPhenologicalStages = (from ps in context.PhenologicalStages
                    //                       where ps.SpecieId == lSpecie.SpecieId
                    //                       select ps).ToList<PhenologicalStage>();
                    //lKCList = (from cc in context.CropCoefficients
                    //           where cc.Name == Utils.NameSpecieSoyaNorthShort
                    //           select cc.KCList)
                    //                     .FirstOrDefault();
                    //lCropInformationByDate = (from cid in context.CropInformationByDates
                    //                          where cid.Name == Utils.NameSpecieSoyaNorthShort
                    //                          select cid).FirstOrDefault();
                    //#endregion
                    //#region Agriculture //////////////////////////////////////////////////////////////////////
                    //lIrrigationUnit = (from iu in context.Pivots
                    //                   where iu.Name == Utils.NamePivotLaRinconada1
                    //                   select iu).FirstOrDefault();
                    //lSoil = (from soil in context.Soils
                    //         where soil.Name == Utils.NameSoilLaRinconada1
                    //         select soil).FirstOrDefault();
                    //lHorizonList = (from horizon in context.Horizons
                    //                where horizon.Name.StartsWith(Utils.NamePivotLaRinconada1)
                    //                select horizon)
                    //                .ToList<Horizon>();
                    //lSowingDate = DataEntry2019.SowingDate_SoyaNorth_LaRinconadaPivot1_2019;
                    //lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_LaRinconadaPivot1_2019;
                    //lCropDate = DateTime.Now;
                    //if (DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot1_2019 == 0)
                    //{
                    //    lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    //}
                    //else
                    //{
                    //    lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot1_2019;
                    //}
                    //#endregion
                    //#region Weather Data
                    //lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                        join weatherstation in context.WeatherStations
                    //                        on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                        where (weatherdata.Date >= lSowingDate &&
                    //                                weatherdata.Date <= lHarvestDate) &&
                    //                                weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                    //                        select weatherdata).ToList<WeatherData>();
                    //lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                    //                               join weatherstation in context.WeatherStations
                    //                               on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                    //                               where (weatherdata.Date >= lSowingDate &&
                    //                                    weatherdata.Date <= lHarvestDate) &&
                    //                                    weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                    //                               select weatherdata).ToList<WeatherData>();
                    //#endregion
                    //#region New CIW La Rinconada Pivot1 2019
                    //var lCIWLaRinconadaPivot1_2019 = new CropIrrigationWeather
                    //{

                    //    CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaRinconadaPivot1_S1920,
                    //    CropId = lCrop.CropId,
                    //    Crop = lCrop,
                    //    IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                    //    IrrigationUnit = lIrrigationUnit,
                    //    MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                    //    MainWeatherStation = lWeatherStationMain,

                    //    WeatherEventType = Utils.WeatherEventType.LaNinia,

                    //    AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                    //    AlternativeWeatherStation = lWeatherStationAlternative,
                    //    PositionId = lFarm.PositionId,
                    //    SoilId = lSoil.SoilId,
                    //    Soil = lSoil,
                    
                    //    MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                    //                             Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                    //                                      Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                    //    AdjustableIrrigationQuantity = true,
                    //    PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                    //    //Set the initial Phenological Stage for the Crop
                    //    PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                    //    PhenologicalStage = lCrop.PhenologicalStageList[0],

                    //    SowingDate = lSowingDate,
                    //    HarvestDate = lHarvestDate,
                    //    CropDate = lCropDate,
                    //    DaysForHydricBalanceUnchangableAfterSowing = 0,

                    //    HydricBalance = 0,

                    //    CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                    //    CropInformationByDate = lCropInformationByDate,

                    //};
                    //context.SaveChanges();

                    ////Set Calculus Method for Phenological Adjustment
                    //lCIWLaRinconadaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    ////Get Initial Hydric Balance
                    //lCIWLaRinconadaPivot1_2019.HydricBalance = lCIWLaRinconadaPivot1_2019.GetInitialHydricBalance();
                    ////Create the initial registry
                    //lCIWLaRinconadaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    //context.CropIrrigationWeathers.Add(lCIWLaRinconadaPivot1_2019);
                    //context.SaveChanges();

                    //#endregion
                    //#region Save Titles for print
                    //foreach (var item in lCIWLaRinconadaPivot1_2019.Titles)
                    //{
                    //    var lTitlesLaRinconadaPivot1_2019 = new Title
                    //    {
                    //        CropIrrigationWeatherId = lCIWLaRinconadaPivot1_2019.CropIrrigationWeatherId,
                    //        CropIrrigationWeather = lCIWLaRinconadaPivot1_2019,
                    //        Daily = false,
                    //        Name = item.Name,
                    //        Abbreviation = item.Abbreviation,
                    //        Description = item.Description,
                    //    };
                    //    context.Titles.Add(lTitlesLaRinconadaPivot1_2019);
                    //}
                    //context.SaveChanges();
                    //long lFirstTitleIdLaRinconadaPivot1_2019 = (from title in context.Titles
                    //                                            where title.Name == "DDS"
                    //                                               && title.Daily == false
                    //                                               && title.CropIrrigationWeatherId == lCIWLaRinconadaPivot1_2019.CropIrrigationWeatherId
                    //                                            select title.TitleId).FirstOrDefault();
                    //long lTotalTitlesLaRinconadaPivot1_2019 = lCIWLaRinconadaPivot1_2019.Titles.Count();
                    //long lTitleIdLaRinconadaPivot1_2019 = lFirstTitleIdLaRinconadaPivot1_2019;
                    //#endregion
                    //#region Update Messages Ids
                    //foreach (var item in lCIWLaRinconadaPivot1_2019.Messages)
                    //{
                    //    item.TitleId = lTitleIdLaRinconadaPivot1_2019;
                    //    lTitleIdLaRinconadaPivot1_2019 += 1;
                    //    item.CropIrrigationWeatherId = lCIWLaRinconadaPivot1_2019.CropIrrigationWeatherId;
                    //    if ((lTitleIdLaRinconadaPivot1_2019 - lFirstTitleIdLaRinconadaPivot1_2019) % (lTotalTitlesLaRinconadaPivot1_2019) == 0)
                    //    {
                    //        lTitleIdLaRinconadaPivot1_2019 = lFirstTitleIdLaRinconadaPivot1_2019;
                    //    }
                    //}
                    //context.SaveChanges();
                    //#endregion
                    #endregion
                    #region La Rinconada Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaRinconada
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaRinconada2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaRinconada2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaRinconada2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_LaRinconadaPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_LaRinconadaPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Rinconada Pivot 2 2019
                    var lCIWLaRinconadaPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaRinconadaPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaRinconadaPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaRinconadaPivot2_2019.HydricBalance = lCIWLaRinconadaPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaRinconadaPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaRinconadaPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaRinconadaPivot2_2019.Titles)
                    {
                        var lTitlesLaRinconadaPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaRinconadaPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaRinconadaPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaRinconadaPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaRinconadaPivot2_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWLaRinconadaPivot2_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaRinconadaPivot2_2019 = lCIWLaRinconadaPivot2_2019.Titles.Count();
                    long lTitleIdLaRinconadaPivot2_2019 = lFirstTitleIdLaRinconadaPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaRinconadaPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaRinconadaPivot2_2019;
                        lTitleIdLaRinconadaPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaRinconadaPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaRinconadaPivot2_2019 - lFirstTitleIdLaRinconadaPivot2_2019) % (lTotalTitlesLaRinconadaPivot2_2019) == 0)
                        {
                            lTitleIdLaRinconadaPivot2_2019 = lFirstTitleIdLaRinconadaPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Rinconada Pivot 3.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaRinconada
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaRinconada3_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaRinconada3_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaRinconada3_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_LaRinconadaPivot3_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_LaRinconadaPivot3_1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot3_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot3_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Rinconada Pivot 3.1 2019
                    var lCIWLaRinconadaPivot3_1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaRinconadaPivot3_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaRinconadaPivot3_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaRinconadaPivot3_1_2019.HydricBalance = lCIWLaRinconadaPivot3_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaRinconadaPivot3_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaRinconadaPivot3_1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaRinconadaPivot3_1_2019.Titles)
                    {
                        var lTitlesLaRinconadaPivot3_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaRinconadaPivot3_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaRinconadaPivot3_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaRinconadaPivot3_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaRinconadaPivot3_1_2019 = (from title in context.Titles
                                                                  where title.Name == "DDS"
                                                                     && title.Daily == false
                                                                     && title.CropIrrigationWeatherId == lCIWLaRinconadaPivot3_1_2019.CropIrrigationWeatherId
                                                                  select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaRinconadaPivot3_1_2019 = lCIWLaRinconadaPivot3_1_2019.Titles.Count();
                    long lTitleIdLaRinconadaPivot3_1_2019 = lFirstTitleIdLaRinconadaPivot3_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaRinconadaPivot3_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaRinconadaPivot3_1_2019;
                        lTitleIdLaRinconadaPivot3_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaRinconadaPivot3_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaRinconadaPivot3_1_2019 - lFirstTitleIdLaRinconadaPivot3_1_2019) % (lTotalTitlesLaRinconadaPivot3_1_2019) == 0)
                        {
                            lTitleIdLaRinconadaPivot3_1_2019 = lFirstTitleIdLaRinconadaPivot3_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Rinconada Pivot 13.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaRinconada
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaRinconada13_1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaRinconada13_1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaRinconada13_1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_LaRinconadaPivot13_1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_LaRinconadaPivot13_1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot13_1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaRinconadaPivot13_1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Rinconada Pivot 13.1 2019
                    var lCIWLaRinconadaPivot13_1_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaRinconadaPivot13_1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaRinconadaPivot13_1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaRinconadaPivot13_1_2019.HydricBalance = lCIWLaRinconadaPivot13_1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaRinconadaPivot13_1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaRinconadaPivot13_1_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaRinconadaPivot13_1_2019.Titles)
                    {
                        var lTitlesLaRinconadaPivot13_1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaRinconadaPivot13_1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaRinconadaPivot13_1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaRinconadaPivot13_1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaRinconadaPivot13_1_2019 = (from title in context.Titles
                                                                   where title.Name == "DDS"
                                                                      && title.Daily == false
                                                                      && title.CropIrrigationWeatherId == lCIWLaRinconadaPivot13_1_2019.CropIrrigationWeatherId
                                                                   select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaRinconadaPivot13_1_2019 = lCIWLaRinconadaPivot13_1_2019.Titles.Count();
                    long lTitleIdLaRinconadaPivot13_1_2019 = lFirstTitleIdLaRinconadaPivot13_1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaRinconadaPivot13_1_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaRinconadaPivot13_1_2019;
                        lTitleIdLaRinconadaPivot13_1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaRinconadaPivot13_1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaRinconadaPivot13_1_2019 - lFirstTitleIdLaRinconadaPivot13_1_2019) % (lTotalTitlesLaRinconadaPivot13_1_2019) == 0)
                        {
                            lTitleIdLaRinconadaPivot13_1_2019 = lFirstTitleIdLaRinconadaPivot13_1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
                }
                #endregion
                #region El Rincon
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElRincon)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_ElRincon_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_ElRincon_2019;

                    Console.Write(" El Rincon | ");
#if false
                    #region El Rincon Pivot 1a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElRincon
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElRincon1a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilElRincon1a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElRincon1a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElRinconPivot1a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElRinconPivot1a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot1a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot1a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Rincon Pivot1a 2019
                    var lCIWElRinconPivot1a_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElRinconPivot1a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElRinconPivot1a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElRinconPivot1a_2019.HydricBalance = lCIWElRinconPivot1a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElRinconPivot1a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElRinconPivot1a_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElRinconPivot1a_2019.Titles)
                    {
                        var lTitlesElRinconPivot1a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElRinconPivot1a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElRinconPivot1a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElRinconPivot1a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElRinconPivot1a_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElRinconPivot1a_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElRinconPivot1a_2019 = lCIWElRinconPivot1a_2019.Titles.Count();
                    long lTitleIdElRinconPivot1a_2019 = lFirstTitleIdElRinconPivot1a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElRinconPivot1a_2019.Messages)
                    {
                        item.TitleId = lTitleIdElRinconPivot1a_2019;
                        lTitleIdElRinconPivot1a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElRinconPivot1a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElRinconPivot1a_2019 - lFirstTitleIdElRinconPivot1a_2019) % (lTotalTitlesElRinconPivot1a_2019) == 0)
                        {
                            lTitleIdElRinconPivot1a_2019 = lFirstTitleIdElRinconPivot1a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Rincon Pivot 2a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElRincon
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElRincon2a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilElRincon2a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElRincon2a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElRinconPivot2a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElRinconPivot2a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot2a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot2a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Rincon Pivot2a 2019
                    var lCIWElRinconPivot2a_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElRinconPivot2a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElRinconPivot2a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElRinconPivot2a_2019.HydricBalance = lCIWElRinconPivot2a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElRinconPivot2a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElRinconPivot2a_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElRinconPivot2a_2019.Titles)
                    {
                        var lTitlesElRinconPivot2a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElRinconPivot2a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElRinconPivot2a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElRinconPivot2a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElRinconPivot2a_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElRinconPivot2a_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElRinconPivot2a_2019 = lCIWElRinconPivot2a_2019.Titles.Count();
                    long lTitleIdElRinconPivot2a_2019 = lFirstTitleIdElRinconPivot2a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElRinconPivot2a_2019.Messages)
                    {
                        item.TitleId = lTitleIdElRinconPivot2a_2019;
                        lTitleIdElRinconPivot2a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElRinconPivot2a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElRinconPivot2a_2019 - lFirstTitleIdElRinconPivot2a_2019) % (lTotalTitlesElRinconPivot2a_2019) == 0)
                        {
                            lTitleIdElRinconPivot2a_2019 = lFirstTitleIdElRinconPivot2a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif

                    #region El Rincon Pivot 1b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElRincon
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElRincon1b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotElRincon1b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElRincon1b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElRinconPivot1b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElRinconPivot1b_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot1b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot1b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Rincon Pivot 1b 2019
                    var lCIWElRinconPivot1b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElRinconPivot1b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElRinconPivot1b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElRinconPivot1b_2019.HydricBalance = lCIWElRinconPivot1b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElRinconPivot1b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElRinconPivot1b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElRinconPivot1b_2019.Titles)
                    {
                        var lTitlesElRinconPivot1b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElRinconPivot1b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElRinconPivot1b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElRinconPivot1b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElRinconPivot1b_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElRinconPivot1b_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElRinconPivot1b_2019 = lCIWElRinconPivot1b_2019.Titles.Count();
                    long lTitleIdElRinconPivot1b_2019 = lFirstTitleIdElRinconPivot1b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElRinconPivot1b_2019.Messages)
                    {
                        item.TitleId = lTitleIdElRinconPivot1b_2019;
                        lTitleIdElRinconPivot1b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElRinconPivot1b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElRinconPivot1b_2019 - lFirstTitleIdElRinconPivot1b_2019) % (lTotalTitlesElRinconPivot1b_2019) == 0)
                        {
                            lTitleIdElRinconPivot1b_2019 = lFirstTitleIdElRinconPivot1b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Rincon Pivot 2b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElRincon
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElRincon2b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotElRincon2b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElRincon2b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElRinconPivot2b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElRinconPivot2b_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot2b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElRinconPivot2b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Rincon Pivot 2b 2019
                    var lCIWElRinconPivot2b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElRinconPivot2b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElRinconPivot2b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElRinconPivot2b_2019.HydricBalance = lCIWElRinconPivot2b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElRinconPivot2b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElRinconPivot2b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElRinconPivot2b_2019.Titles)
                    {
                        var lTitlesElRinconPivot2b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElRinconPivot2b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElRinconPivot2b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElRinconPivot2b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElRinconPivot2b_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElRinconPivot2b_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElRinconPivot2b_2019 = lCIWElRinconPivot2b_2019.Titles.Count();
                    long lTitleIdElRinconPivot2b_2019 = lFirstTitleIdElRinconPivot2b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElRinconPivot2b_2019.Messages)
                    {
                        item.TitleId = lTitleIdElRinconPivot2b_2019;
                        lTitleIdElRinconPivot2b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElRinconPivot2b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElRinconPivot2b_2019 - lFirstTitleIdElRinconPivot2b_2019) % (lTotalTitlesElRinconPivot2b_2019) == 0)
                        {
                            lTitleIdElRinconPivot2b_2019 = lFirstTitleIdElRinconPivot2b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region El Desafio
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElDesafio)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_ElDesafio_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_ElDesafio_2019;

                    Console.Write(" El Desafio | ");

                    #region El Desafio Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElDesafio
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSudanGrassSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSudanGrassSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElDesafio1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilElDesafio1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElDesafio1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SudanGrassSouth_ElDesafioPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SudanGrassSouth_ElDesafioPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElDesafioPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElDesafioPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Desafio Pivot1 2019
                    var lCIWElDesafioPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElDesafioPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElDesafioPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElDesafioPivot1_2019.HydricBalance = lCIWElDesafioPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElDesafioPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElDesafioPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElDesafioPivot1_2019.Titles)
                    {
                        var lTitlesElDesafioPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElDesafioPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElDesafioPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElDesafioPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElDesafioPivot1_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElDesafioPivot1_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElDesafioPivot1_2019 = lCIWElDesafioPivot1_2019.Titles.Count();
                    long lTitleIdElDesafioPivot1_2019 = lFirstTitleIdElDesafioPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElDesafioPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdElDesafioPivot1_2019;
                        lTitleIdElDesafioPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElDesafioPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElDesafioPivot1_2019 - lFirstTitleIdElDesafioPivot1_2019) % (lTotalTitlesElDesafioPivot1_2019) == 0)
                        {
                            lTitleIdElDesafioPivot1_2019 = lFirstTitleIdElDesafioPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Desafio Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElDesafio
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSudanGrassSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSudanGrassSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElDesafio2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotElDesafio2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElDesafio2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SudanGrassSouth_ElDesafioPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SudanGrassSouth_ElDesafioPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElDesafioPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElDesafioPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Desafio Pivot 2 2019
                    var lCIWElDesafioPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElDesafioPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElDesafioPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElDesafioPivot2_2019.HydricBalance = lCIWElDesafioPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElDesafioPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElDesafioPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElDesafioPivot2_2019.Titles)
                    {
                        var lTitlesElDesafioPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElDesafioPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElDesafioPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElDesafioPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElDesafioPivot2_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWElDesafioPivot2_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElDesafioPivot2_2019 = lCIWElDesafioPivot2_2019.Titles.Count();
                    long lTitleIdElDesafioPivot2_2019 = lFirstTitleIdElDesafioPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElDesafioPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdElDesafioPivot2_2019;
                        lTitleIdElDesafioPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElDesafioPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElDesafioPivot2_2019 - lFirstTitleIdElDesafioPivot2_2019) % (lTotalTitlesElDesafioPivot2_2019) == 0)
                        {
                            lTitleIdElDesafioPivot2_2019 = lFirstTitleIdElDesafioPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region Los Naranjales
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LosNaranjales)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_LosNaranjales_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_LosNaranjales_2019;

                    Console.Write(" Los Naranjales | ");

                    #region Los Naranjales Pivot 6aT3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLosNaranjales
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLosNaranjales6aT3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLosNaranjales6aT3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLosNaranjales6aT3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_LosNaranjalesPivot6aT3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_LosNaranjalesPivot6aT3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot6aT3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot6aT3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Los Naranjales Pivot6aT3 2019
                    var lCIWLosNaranjalesPivot6aT3_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLosNaranjalesPivot6aT3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLosNaranjalesPivot6aT3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLosNaranjalesPivot6aT3_2019.HydricBalance = lCIWLosNaranjalesPivot6aT3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLosNaranjalesPivot6aT3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLosNaranjalesPivot6aT3_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLosNaranjalesPivot6aT3_2019.Titles)
                    {
                        var lTitlesLosNaranjalesPivot6aT3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLosNaranjalesPivot6aT3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLosNaranjalesPivot6aT3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLosNaranjalesPivot6aT3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLosNaranjalesPivot6aT3_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWLosNaranjalesPivot6aT3_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLosNaranjalesPivot6aT3_2019 = lCIWLosNaranjalesPivot6aT3_2019.Titles.Count();
                    long lTitleIdLosNaranjalesPivot6aT3_2019 = lFirstTitleIdLosNaranjalesPivot6aT3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLosNaranjalesPivot6aT3_2019.Messages)
                    {
                        item.TitleId = lTitleIdLosNaranjalesPivot6aT3_2019;
                        lTitleIdLosNaranjalesPivot6aT3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLosNaranjalesPivot6aT3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLosNaranjalesPivot6aT3_2019 - lFirstTitleIdLosNaranjalesPivot6aT3_2019) % (lTotalTitlesLosNaranjalesPivot6aT3_2019) == 0)
                        {
                            lTitleIdLosNaranjalesPivot6aT3_2019 = lFirstTitleIdLosNaranjalesPivot6aT3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Los Naranjales Pivot 6bT3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLosNaranjales
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLosNaranjales6bT3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLosNaranjales6bT3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLosNaranjales6bT3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_LosNaranjalesPivot6bT3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_LosNaranjalesPivot6bT3_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot6bT3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot6bT3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Los Naranjales Pivot 6bT3 2019
                    var lCIWLosNaranjalesPivot6bT3_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLosNaranjalesPivot6bT3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLosNaranjalesPivot6bT3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLosNaranjalesPivot6bT3_2019.HydricBalance = lCIWLosNaranjalesPivot6bT3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLosNaranjalesPivot6bT3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLosNaranjalesPivot6bT3_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLosNaranjalesPivot6bT3_2019.Titles)
                    {
                        var lTitlesLosNaranjalesPivot6bT3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLosNaranjalesPivot6bT3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLosNaranjalesPivot6bT3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLosNaranjalesPivot6bT3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLosNaranjalesPivot6bT3_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWLosNaranjalesPivot6bT3_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLosNaranjalesPivot6bT3_2019 = lCIWLosNaranjalesPivot6bT3_2019.Titles.Count();
                    long lTitleIdLosNaranjalesPivot6bT3_2019 = lFirstTitleIdLosNaranjalesPivot6bT3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLosNaranjalesPivot6bT3_2019.Messages)
                    {
                        item.TitleId = lTitleIdLosNaranjalesPivot6bT3_2019;
                        lTitleIdLosNaranjalesPivot6bT3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLosNaranjalesPivot6bT3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLosNaranjalesPivot6bT3_2019 - lFirstTitleIdLosNaranjalesPivot6bT3_2019) % (lTotalTitlesLosNaranjalesPivot6bT3_2019) == 0)
                        {
                            lTitleIdLosNaranjalesPivot6bT3_2019 = lFirstTitleIdLosNaranjalesPivot6bT3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Los Naranjales Pivot 5aT5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLosNaranjales
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieFescueForageSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieFescueForageSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieFescueForageSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieFescueForageSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieFescueForageSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLosNaranjales5aT5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLosNaranjales5aT5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLosNaranjales5aT5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_FescueForageSouth_LosNaranjalesPivot5aT5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_FescueForageSouth_LosNaranjalesPivot5aT5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot5aT5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot5aT5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Los Naranjales Pivot5aT5 2019
                    var lCIWLosNaranjalesPivot5aT5_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLosNaranjalesPivot5aT5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLosNaranjalesPivot5aT5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLosNaranjalesPivot5aT5_2019.HydricBalance = lCIWLosNaranjalesPivot5aT5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLosNaranjalesPivot5aT5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLosNaranjalesPivot5aT5_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLosNaranjalesPivot5aT5_2019.Titles)
                    {
                        var lTitlesLosNaranjalesPivot5aT5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLosNaranjalesPivot5aT5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLosNaranjalesPivot5aT5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLosNaranjalesPivot5aT5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLosNaranjalesPivot5aT5_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWLosNaranjalesPivot5aT5_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLosNaranjalesPivot5aT5_2019 = lCIWLosNaranjalesPivot5aT5_2019.Titles.Count();
                    long lTitleIdLosNaranjalesPivot5aT5_2019 = lFirstTitleIdLosNaranjalesPivot5aT5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLosNaranjalesPivot5aT5_2019.Messages)
                    {
                        item.TitleId = lTitleIdLosNaranjalesPivot5aT5_2019;
                        lTitleIdLosNaranjalesPivot5aT5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLosNaranjalesPivot5aT5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLosNaranjalesPivot5aT5_2019 - lFirstTitleIdLosNaranjalesPivot5aT5_2019) % (lTotalTitlesLosNaranjalesPivot5aT5_2019) == 0)
                        {
                            lTitleIdLosNaranjalesPivot5aT5_2019 = lFirstTitleIdLosNaranjalesPivot5aT5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Los Naranjales Pivot 5bT5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLosNaranjales
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLosNaranjales5bT5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLosNaranjales5bT5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLosNaranjales5bT5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_LosNaranjalesPivot5bT5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_LosNaranjalesPivot5bT5_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot5bT5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LosNaranjalesPivot5bT5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Los Naranjales Pivot 1b 2019
                    var lCIWLosNaranjalesPivot5bT5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLosNaranjalesPivot5bT5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLosNaranjalesPivot5bT5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLosNaranjalesPivot5bT5_2019.HydricBalance = lCIWLosNaranjalesPivot5bT5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLosNaranjalesPivot5bT5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLosNaranjalesPivot5bT5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLosNaranjalesPivot5bT5_2019.Titles)
                    {
                        var lTitlesLosNaranjalesPivot5bT5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLosNaranjalesPivot5bT5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLosNaranjalesPivot5bT5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLosNaranjalesPivot5bT5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLosNaranjalesPivot5bT5_2019 = (from title in context.Titles
                                                                     where title.Name == "DDS"
                                                                        && title.Daily == false
                                                                        && title.CropIrrigationWeatherId == lCIWLosNaranjalesPivot5bT5_2019.CropIrrigationWeatherId
                                                                     select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLosNaranjalesPivot5bT5_2019 = lCIWLosNaranjalesPivot5bT5_2019.Titles.Count();
                    long lTitleIdLosNaranjalesPivot5bT5_2019 = lFirstTitleIdLosNaranjalesPivot5bT5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLosNaranjalesPivot5bT5_2019.Messages)
                    {
                        item.TitleId = lTitleIdLosNaranjalesPivot5bT5_2019;
                        lTitleIdLosNaranjalesPivot5bT5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLosNaranjalesPivot5bT5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLosNaranjalesPivot5bT5_2019 - lFirstTitleIdLosNaranjalesPivot5bT5_2019) % (lTotalTitlesLosNaranjalesPivot5bT5_2019) == 0)
                        {
                            lTitleIdLosNaranjalesPivot5bT5_2019 = lFirstTitleIdLosNaranjalesPivot5bT5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region Santa Emilia
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantaEmilia)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_SantaEmilia_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_SantaEmilia_2019;

                    Console.Write(" Santa Emilia | ");
#if false
                    #region Santa Emilia Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaEmilia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaEmilia1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantaEmilia1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaEmilia1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantaEmiliaPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_SantaEmiliaPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santa Emilia Pivot1 2019
                    var lCIWSantaEmiliaPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaEmiliaPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,
                        
                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart, 
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaEmiliaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaEmiliaPivot1_2019.HydricBalance = lCIWSantaEmiliaPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaEmiliaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaEmiliaPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantaEmiliaPivot1_2019.Titles)
                    {
                        var lTitlesSantaEmiliaPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaEmiliaPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaEmiliaPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaEmiliaPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaEmiliaPivot1_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWSantaEmiliaPivot1_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaEmiliaPivot1_2019 = lCIWSantaEmiliaPivot1_2019.Titles.Count();
                    long lTitleIdSantaEmiliaPivot1_2019 = lFirstTitleIdSantaEmiliaPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantaEmiliaPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaEmiliaPivot1_2019;
                        lTitleIdSantaEmiliaPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaEmiliaPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantaEmiliaPivot1_2019 - lFirstTitleIdSantaEmiliaPivot1_2019) % (lTotalTitlesSantaEmiliaPivot1_2019) == 0)
                        {
                            lTitleIdSantaEmiliaPivot1_2019 = lFirstTitleIdSantaEmiliaPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Santa Emilia Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaEmilia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaEmilia2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotSantaEmilia2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaEmilia2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_SantaEmiliaPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_SantaEmiliaPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santa Emilia Pivot 2 2019
                    var lCIWSantaEmiliaPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaEmiliaPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaEmiliaPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaEmiliaPivot2_2019.HydricBalance = lCIWSantaEmiliaPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaEmiliaPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaEmiliaPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantaEmiliaPivot2_2019.Titles)
                    {
                        var lTitlesSantaEmiliaPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaEmiliaPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaEmiliaPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaEmiliaPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaEmiliaPivot2_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWSantaEmiliaPivot2_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaEmiliaPivot2_2019 = lCIWSantaEmiliaPivot2_2019.Titles.Count();
                    long lTitleIdSantaEmiliaPivot2_2019 = lFirstTitleIdSantaEmiliaPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantaEmiliaPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaEmiliaPivot2_2019;
                        lTitleIdSantaEmiliaPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaEmiliaPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantaEmiliaPivot2_2019 - lFirstTitleIdSantaEmiliaPivot2_2019) % (lTotalTitlesSantaEmiliaPivot2_2019) == 0)
                        {
                            lTitleIdSantaEmiliaPivot2_2019 = lFirstTitleIdSantaEmiliaPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Santa Emilia Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaEmilia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaEmilia5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantaEmilia5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaEmilia5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantaEmiliaPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_SantaEmiliaPivot5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santa Emilia Pivot1 2019
                    var lCIWSantaEmiliaPivot5_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaEmiliaPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaEmiliaPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaEmiliaPivot5_2019.HydricBalance = lCIWSantaEmiliaPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaEmiliaPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaEmiliaPivot5_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantaEmiliaPivot5_2019.Titles)
                    {
                        var lTitlesSantaEmiliaPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaEmiliaPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaEmiliaPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaEmiliaPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaEmiliaPivot5_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWSantaEmiliaPivot5_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaEmiliaPivot5_2019 = lCIWSantaEmiliaPivot5_2019.Titles.Count();
                    long lTitleIdSantaEmiliaPivot5_2019 = lFirstTitleIdSantaEmiliaPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantaEmiliaPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaEmiliaPivot5_2019;
                        lTitleIdSantaEmiliaPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaEmiliaPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantaEmiliaPivot5_2019 - lFirstTitleIdSantaEmiliaPivot5_2019) % (lTotalTitlesSantaEmiliaPivot5_2019) == 0)
                        {
                            lTitleIdSantaEmiliaPivot5_2019 = lFirstTitleIdSantaEmiliaPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Santa Emilia Pivot 7 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaEmilia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaEmilia7
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantaEmilia7
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaEmilia7)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantaEmiliaPivot7_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_SantaEmiliaPivot7_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot7_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivot7_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santa Emilia Pivot7 2019
                    var lCIWSantaEmiliaPivot7_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaEmiliaPivot7_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaEmiliaPivot7_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaEmiliaPivot7_2019.HydricBalance = lCIWSantaEmiliaPivot7_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaEmiliaPivot7_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaEmiliaPivot7_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantaEmiliaPivot7_2019.Titles)
                    {
                        var lTitlesSantaEmiliaPivot7_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaEmiliaPivot7_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaEmiliaPivot7_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaEmiliaPivot7_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaEmiliaPivot7_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWSantaEmiliaPivot7_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaEmiliaPivot7_2019 = lCIWSantaEmiliaPivot7_2019.Titles.Count();
                    long lTitleIdSantaEmiliaPivot7_2019 = lFirstTitleIdSantaEmiliaPivot7_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantaEmiliaPivot7_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaEmiliaPivot7_2019;
                        lTitleIdSantaEmiliaPivot7_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaEmiliaPivot7_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantaEmiliaPivot7_2019 - lFirstTitleIdSantaEmiliaPivot7_2019) % (lTotalTitlesSantaEmiliaPivot7_2019) == 0)
                        {
                            lTitleIdSantaEmiliaPivot7_2019 = lFirstTitleIdSantaEmiliaPivot7_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#endif
                    #region Santa Emilia Pivot ZP 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantaEmilia
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantaEmiliaZP
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantaEmiliaZP
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantaEmiliaZP)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantaEmiliaPivotZP_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_SantaEmiliaPivotZP_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivotZP_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantaEmiliaPivotZP_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santa Emilia Pivot1 2019
                    var lCIWSantaEmiliaPivotZP_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantaEmiliaPivotZP_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantaEmiliaPivotZP_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantaEmiliaPivotZP_2019.HydricBalance = lCIWSantaEmiliaPivotZP_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantaEmiliaPivotZP_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantaEmiliaPivotZP_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantaEmiliaPivotZP_2019.Titles)
                    {
                        var lTitlesSantaEmiliaPivotZP_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantaEmiliaPivotZP_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantaEmiliaPivotZP_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantaEmiliaPivotZP_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantaEmiliaPivotZP_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWSantaEmiliaPivotZP_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantaEmiliaPivotZP_2019 = lCIWSantaEmiliaPivotZP_2019.Titles.Count();
                    long lTitleIdSantaEmiliaPivotZP_2019 = lFirstTitleIdSantaEmiliaPivotZP_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantaEmiliaPivotZP_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantaEmiliaPivotZP_2019;
                        lTitleIdSantaEmiliaPivotZP_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantaEmiliaPivotZP_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantaEmiliaPivotZP_2019 - lFirstTitleIdSantaEmiliaPivotZP_2019) % (lTotalTitlesSantaEmiliaPivotZP_2019) == 0)
                        {
                            lTitleIdSantaEmiliaPivotZP_2019 = lFirstTitleIdSantaEmiliaPivotZP_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#if true
#endif
                }
                #endregion
                #region Gran Molino
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GranMolino)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_GranMolino_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_GranMolino_2019;

                    Console.Write(" Gran Molino | ");

                    #region Gran Molino Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_GranMolinoPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_GranMolinoPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot1 2019
                    var lCIWGranMolinoPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot1_2019.HydricBalance = lCIWGranMolinoPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot1_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot1_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGranMolinoPivot1_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot1_2019 = lCIWGranMolinoPivot1_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot1_2019 = lFirstTitleIdGranMolinoPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot1_2019;
                        lTitleIdGranMolinoPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot1_2019 - lFirstTitleIdGranMolinoPivot1_2019) % (lTotalTitlesGranMolinoPivot1_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot1_2019 = lFirstTitleIdGranMolinoPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Gran Molino Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_GranMolinoPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_GranMolinoPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot 2 2019
                    var lCIWGranMolinoPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot2_2019.HydricBalance = lCIWGranMolinoPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot2_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot2_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGranMolinoPivot2_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot2_2019 = lCIWGranMolinoPivot2_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot2_2019 = lFirstTitleIdGranMolinoPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot2_2019;
                        lTitleIdGranMolinoPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot2_2019 - lFirstTitleIdGranMolinoPivot2_2019) % (lTotalTitlesGranMolinoPivot2_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot2_2019 = lFirstTitleIdGranMolinoPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Gran Molino Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_GranMolinoPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_GranMolinoPivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot3 2019
                    var lCIWGranMolinoPivot3_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot3_2019.HydricBalance = lCIWGranMolinoPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot3_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot3_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot3_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGranMolinoPivot3_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot3_2019 = lCIWGranMolinoPivot3_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot3_2019 = lFirstTitleIdGranMolinoPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot3_2019;
                        lTitleIdGranMolinoPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot3_2019 - lFirstTitleIdGranMolinoPivot3_2019) % (lTotalTitlesGranMolinoPivot3_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot3_2019 = lFirstTitleIdGranMolinoPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Gran Molino Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieAlfalfaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieAlfalfaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieAlfalfaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieAlfalfaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieAlfalfaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_AlfalfaSouth_GranMolinoPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_AlfalfaSouth_GranMolinoPivot4_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot4 2019
                    var lCIWGranMolinoPivot4_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot4_2019.HydricBalance = lCIWGranMolinoPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot4_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot4_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot4_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGranMolinoPivot4_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot4_2019 = lCIWGranMolinoPivot4_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot4_2019 = lFirstTitleIdGranMolinoPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot4_2019;
                        lTitleIdGranMolinoPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot4_2019 - lFirstTitleIdGranMolinoPivot4_2019) % (lTotalTitlesGranMolinoPivot4_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot4_2019 = lFirstTitleIdGranMolinoPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Gran Molino Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_GranMolinoPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_GranMolinoPivot5_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot5 2019
                    var lCIWGranMolinoPivot5_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot5_2019.HydricBalance = lCIWGranMolinoPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot5_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot5_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot5_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWGranMolinoPivot5_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot5_2019 = lCIWGranMolinoPivot5_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot5_2019 = lFirstTitleIdGranMolinoPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot5_2019;
                        lTitleIdGranMolinoPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot5_2019 - lFirstTitleIdGranMolinoPivot5_2019) % (lTotalTitlesGranMolinoPivot5_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot5_2019 = lFirstTitleIdGranMolinoPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

                    //2020-04-15 Add Oat as pastures
                    #region Gran Molino Pivot 2b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieOatSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieOatSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieOatSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieOatSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieOatSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino2b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino2b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino2b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_OatSouth_GranMolinoPivot2b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_OatSouth_GranMolinoPivot2b_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot2b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot2b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot 2b 2019
                    var lCIWGranMolinoPivot2b_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot2b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot2b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot2b_2019.HydricBalance = lCIWGranMolinoPivot2b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot2b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot2b_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot2b_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot2b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot2b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot2b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot2b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot2b_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGranMolinoPivot2b_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot2b_2019 = lCIWGranMolinoPivot2b_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot2b_2019 = lFirstTitleIdGranMolinoPivot2b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot2b_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot2b_2019;
                        lTitleIdGranMolinoPivot2b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot2b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot2b_2019 - lFirstTitleIdGranMolinoPivot2b_2019) % (lTotalTitlesGranMolinoPivot2b_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot2b_2019 = lFirstTitleIdGranMolinoPivot2b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Gran Molino Pivot 5b 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmGranMolino
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieOatSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieOatSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieOatSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieOatSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieOatSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotGranMolino5b
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilGranMolino5b
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotGranMolino5b)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_OatSouth_GranMolinoPivot5b_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_OatSouth_GranMolinoPivot5b_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot5b_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_GranMolinoPivot5b_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Gran Molino Pivot5b 2019
                    var lCIWGranMolinoPivot5b_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherGranMolinoPivot5b_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = false,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWGranMolinoPivot5b_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWGranMolinoPivot5b_2019.HydricBalance = lCIWGranMolinoPivot5b_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWGranMolinoPivot5b_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWGranMolinoPivot5b_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWGranMolinoPivot5b_2019.Titles)
                    {
                        var lTitlesGranMolinoPivot5b_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWGranMolinoPivot5b_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWGranMolinoPivot5b_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesGranMolinoPivot5b_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdGranMolinoPivot5b_2019 = (from title in context.Titles
                                                                where title.Name == "DDS"
                                                                   && title.Daily == false
                                                                   && title.CropIrrigationWeatherId == lCIWGranMolinoPivot5b_2019.CropIrrigationWeatherId
                                                                select title.TitleId).FirstOrDefault();
                    long lTotalTitlesGranMolinoPivot5b_2019 = lCIWGranMolinoPivot5b_2019.Titles.Count();
                    long lTitleIdGranMolinoPivot5b_2019 = lFirstTitleIdGranMolinoPivot5b_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWGranMolinoPivot5b_2019.Messages)
                    {
                        item.TitleId = lTitleIdGranMolinoPivot5b_2019;
                        lTitleIdGranMolinoPivot5b_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWGranMolinoPivot5b_2019.CropIrrigationWeatherId;
                        if ((lTitleIdGranMolinoPivot5b_2019 - lFirstTitleIdGranMolinoPivot5b_2019) % (lTotalTitlesGranMolinoPivot5b_2019) == 0)
                        {
                            lTitleIdGranMolinoPivot5b_2019 = lFirstTitleIdGranMolinoPivot5b_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

                }
                #endregion
                #region La Portuguesa
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaPortuguesa)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_LaPortuguesa_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_LaPortuguesa_2019;

                    Console.Write(" La Portuguesa | ");

                    #region La Portuguesa Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaPortuguesa
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaPortuguesa1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLaPortuguesa1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaPortuguesa1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornNorth_LaPortuguesaPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornNorth_LaPortuguesaPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaPortuguesaPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaPortuguesaPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Portuguesa Pivot1 2019
                    var lCIWLaPortuguesaPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaPortuguesaPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaPortuguesaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaPortuguesaPivot1_2019.HydricBalance = lCIWLaPortuguesaPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaPortuguesaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaPortuguesaPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaPortuguesaPivot1_2019.Titles)
                    {
                        var lTitlesLaPortuguesaPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaPortuguesaPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaPortuguesaPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaPortuguesaPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaPortuguesaPivot1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWLaPortuguesaPivot1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaPortuguesaPivot1_2019 = lCIWLaPortuguesaPivot1_2019.Titles.Count();
                    long lTitleIdLaPortuguesaPivot1_2019 = lFirstTitleIdLaPortuguesaPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaPortuguesaPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaPortuguesaPivot1_2019;
                        lTitleIdLaPortuguesaPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaPortuguesaPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaPortuguesaPivot1_2019 - lFirstTitleIdLaPortuguesaPivot1_2019) % (lTotalTitlesLaPortuguesaPivot1_2019) == 0)
                        {
                            lTitleIdLaPortuguesaPivot1_2019 = lFirstTitleIdLaPortuguesaPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Portuguesa Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaPortuguesa
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionNorth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaNorthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaNorthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaNorthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaNorthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaNorthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaPortuguesa2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaPortuguesa2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaPortuguesa2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaNorth_LaPortuguesaPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaNorth_LaPortuguesaPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaPortuguesaPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaPortuguesaPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Portuguesa Pivot 2 2019
                    var lCIWLaPortuguesaPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaPortuguesaPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaPortuguesaPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaPortuguesaPivot2_2019.HydricBalance = lCIWLaPortuguesaPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaPortuguesaPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaPortuguesaPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaPortuguesaPivot2_2019.Titles)
                    {
                        var lTitlesLaPortuguesaPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaPortuguesaPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaPortuguesaPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaPortuguesaPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaPortuguesaPivot2_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWLaPortuguesaPivot2_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaPortuguesaPivot2_2019 = lCIWLaPortuguesaPivot2_2019.Titles.Count();
                    long lTitleIdLaPortuguesaPivot2_2019 = lFirstTitleIdLaPortuguesaPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaPortuguesaPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaPortuguesaPivot2_2019;
                        lTitleIdLaPortuguesaPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaPortuguesaPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaPortuguesaPivot2_2019 - lFirstTitleIdLaPortuguesaPivot2_2019) % (lTotalTitlesLaPortuguesaPivot2_2019) == 0)
                        {
                            lTitleIdLaPortuguesaPivot2_2019 = lFirstTitleIdLaPortuguesaPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region Cassarino - La Perdiz
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.CassarinoLaPerdiz)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_CassarinoLaPerdiz_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_CassarinoLaPerdiz_2019;

                    Console.Write(" Cassarino - La Perdiz | ");

                    #region Cassarino - La Perdiz Pivot 1.1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmCassarinoLaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSudanGrassSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSudanGrassSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotCassarinoLaPerdiz11
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilCassarinoLaPerdiz11
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotCassarinoLaPerdiz11)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SudanGrassSouth_CassarinoLaPerdizPivot11_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SudanGrassSouth_CassarinoLaPerdizPivot11_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot11_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot11_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Cassarino - La Perdiz Pivot 1.1 2019
                    var lCIWCassarinoLaPerdizPivot11_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherCassarinoLaPerdizPivot11_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWCassarinoLaPerdizPivot11_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWCassarinoLaPerdizPivot11_2019.HydricBalance = lCIWCassarinoLaPerdizPivot11_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWCassarinoLaPerdizPivot11_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWCassarinoLaPerdizPivot11_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWCassarinoLaPerdizPivot11_2019.Titles)
                    {
                        var lTitlesCassarinoLaPerdizPivot11_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot11_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWCassarinoLaPerdizPivot11_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesCassarinoLaPerdizPivot11_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdCassarinoLaPerdizPivot11_2019 = (from title in context.Titles
                                                                       where title.Name == "DDS"
                                                                          && title.Daily == false
                                                                          && title.CropIrrigationWeatherId == lCIWCassarinoLaPerdizPivot11_2019.CropIrrigationWeatherId
                                                                       select title.TitleId).FirstOrDefault();
                    long lTotalTitlesCassarinoLaPerdizPivot11_2019 = lCIWCassarinoLaPerdizPivot11_2019.Titles.Count();
                    long lTitleIdCassarinoLaPerdizPivot11_2019 = lFirstTitleIdCassarinoLaPerdizPivot11_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWCassarinoLaPerdizPivot11_2019.Messages)
                    {
                        item.TitleId = lTitleIdCassarinoLaPerdizPivot11_2019;
                        lTitleIdCassarinoLaPerdizPivot11_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot11_2019.CropIrrigationWeatherId;
                        if ((lTitleIdCassarinoLaPerdizPivot11_2019 - lFirstTitleIdCassarinoLaPerdizPivot11_2019) % (lTotalTitlesCassarinoLaPerdizPivot11_2019) == 0)
                        {
                            lTitleIdCassarinoLaPerdizPivot11_2019 = lFirstTitleIdCassarinoLaPerdizPivot11_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Cassarino - La Perdiz Pivot 1.2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmCassarinoLaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotCassarinoLaPerdiz12
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotCassarinoLaPerdiz12
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotCassarinoLaPerdiz12)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_CassarinoLaPerdizPivot12_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_CassarinoLaPerdizPivot12_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot12_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot12_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Cassarino - La Perdiz Pivot 1.2 2019
                    var lCIWCassarinoLaPerdizPivot12_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherCassarinoLaPerdizPivot12_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWCassarinoLaPerdizPivot12_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWCassarinoLaPerdizPivot12_2019.HydricBalance = lCIWCassarinoLaPerdizPivot12_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWCassarinoLaPerdizPivot12_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWCassarinoLaPerdizPivot12_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWCassarinoLaPerdizPivot12_2019.Titles)
                    {
                        var lTitlesCassarinoLaPerdizPivot12_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot12_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWCassarinoLaPerdizPivot12_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesCassarinoLaPerdizPivot12_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdCassarinoLaPerdizPivot12_2019 = (from title in context.Titles
                                                                       where title.Name == "DDS"
                                                                          && title.Daily == false
                                                                          && title.CropIrrigationWeatherId == lCIWCassarinoLaPerdizPivot12_2019.CropIrrigationWeatherId
                                                                       select title.TitleId).FirstOrDefault();
                    long lTotalTitlesCassarinoLaPerdizPivot12_2019 = lCIWCassarinoLaPerdizPivot12_2019.Titles.Count();
                    long lTitleIdCassarinoLaPerdizPivot12_2019 = lFirstTitleIdCassarinoLaPerdizPivot12_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWCassarinoLaPerdizPivot12_2019.Messages)
                    {
                        item.TitleId = lTitleIdCassarinoLaPerdizPivot12_2019;
                        lTitleIdCassarinoLaPerdizPivot12_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot12_2019.CropIrrigationWeatherId;
                        if ((lTitleIdCassarinoLaPerdizPivot12_2019 - lFirstTitleIdCassarinoLaPerdizPivot12_2019) % (lTotalTitlesCassarinoLaPerdizPivot12_2019) == 0)
                        {
                            lTitleIdCassarinoLaPerdizPivot12_2019 = lFirstTitleIdCassarinoLaPerdizPivot12_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Cassarino - La Perdiz Pivot 1.3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmCassarinoLaPerdiz
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotCassarinoLaPerdiz13
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilCassarinoLaPerdiz13
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotCassarinoLaPerdiz13)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_CassarinoLaPerdizPivot13_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_CassarinoLaPerdizPivot13_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot13_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_CassarinoLaPerdizPivot13_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Cassarino - La Perdiz Pivot13 2019
                    var lCIWCassarinoLaPerdizPivot13_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherCassarinoLaPerdizPivot13_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWCassarinoLaPerdizPivot13_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWCassarinoLaPerdizPivot13_2019.HydricBalance = lCIWCassarinoLaPerdizPivot13_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWCassarinoLaPerdizPivot13_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWCassarinoLaPerdizPivot13_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWCassarinoLaPerdizPivot13_2019.Titles)
                    {
                        var lTitlesCassarinoLaPerdizPivot13_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot13_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWCassarinoLaPerdizPivot13_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesCassarinoLaPerdizPivot13_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdCassarinoLaPerdizPivot13_2019 = (from title in context.Titles
                                                                       where title.Name == "DDS"
                                                                          && title.Daily == false
                                                                          && title.CropIrrigationWeatherId == lCIWCassarinoLaPerdizPivot13_2019.CropIrrigationWeatherId
                                                                       select title.TitleId).FirstOrDefault();
                    long lTotalTitlesCassarinoLaPerdizPivot13_2019 = lCIWCassarinoLaPerdizPivot13_2019.Titles.Count();
                    long lTitleIdCassarinoLaPerdizPivot13_2019 = lFirstTitleIdCassarinoLaPerdizPivot13_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWCassarinoLaPerdizPivot13_2019.Messages)
                    {
                        item.TitleId = lTitleIdCassarinoLaPerdizPivot13_2019;
                        lTitleIdCassarinoLaPerdizPivot13_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWCassarinoLaPerdizPivot13_2019.CropIrrigationWeatherId;
                        if ((lTitleIdCassarinoLaPerdizPivot13_2019 - lFirstTitleIdCassarinoLaPerdizPivot13_2019) % (lTotalTitlesCassarinoLaPerdizPivot13_2019) == 0)
                        {
                            lTitleIdCassarinoLaPerdizPivot13_2019 = lFirstTitleIdCassarinoLaPerdizPivot13_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region Santo Domingo
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantoDomingo)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_SantoDomingo_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_SantoDomingo_2019;

                    Console.Write(" Santo Domingo | ");

                    #region Santo Domingo Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantoDomingo
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSoyaSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSoyaSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSoyaSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSoyaSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSoyaSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantoDomingo1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilSantoDomingo1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantoDomingo1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SoyaSouth_SantoDomingoPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SoyaSouth_SantoDomingoPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantoDomingoPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantoDomingoPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santo Domingo Pivot1 2019
                    var lCIWSantoDomingoPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantoDomingoPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantoDomingoPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantoDomingoPivot1_2019.HydricBalance = lCIWSantoDomingoPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantoDomingoPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantoDomingoPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantoDomingoPivot1_2019.Titles)
                    {
                        var lTitlesSantoDomingoPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantoDomingoPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantoDomingoPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantoDomingoPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantoDomingoPivot1_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWSantoDomingoPivot1_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantoDomingoPivot1_2019 = lCIWSantoDomingoPivot1_2019.Titles.Count();
                    long lTitleIdSantoDomingoPivot1_2019 = lFirstTitleIdSantoDomingoPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantoDomingoPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantoDomingoPivot1_2019;
                        lTitleIdSantoDomingoPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantoDomingoPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantoDomingoPivot1_2019 - lFirstTitleIdSantoDomingoPivot1_2019) % (lTotalTitlesSantoDomingoPivot1_2019) == 0)
                        {
                            lTitleIdSantoDomingoPivot1_2019 = lFirstTitleIdSantoDomingoPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Santo Domingo Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmSantoDomingo
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotSantoDomingo2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotSantoDomingo2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotSantoDomingo2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_SantoDomingoPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_SantoDomingoPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_SantoDomingoPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_SantoDomingoPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Santo Domingo Pivot 2 2019
                    var lCIWSantoDomingoPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherSantoDomingoPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWSantoDomingoPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWSantoDomingoPivot2_2019.HydricBalance = lCIWSantoDomingoPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWSantoDomingoPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWSantoDomingoPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWSantoDomingoPivot2_2019.Titles)
                    {
                        var lTitlesSantoDomingoPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWSantoDomingoPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWSantoDomingoPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesSantoDomingoPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdSantoDomingoPivot2_2019 = (from title in context.Titles
                                                                 where title.Name == "DDS"
                                                                    && title.Daily == false
                                                                    && title.CropIrrigationWeatherId == lCIWSantoDomingoPivot2_2019.CropIrrigationWeatherId
                                                                 select title.TitleId).FirstOrDefault();
                    long lTotalTitlesSantoDomingoPivot2_2019 = lCIWSantoDomingoPivot2_2019.Titles.Count();
                    long lTitleIdSantoDomingoPivot2_2019 = lFirstTitleIdSantoDomingoPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWSantoDomingoPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdSantoDomingoPivot2_2019;
                        lTitleIdSantoDomingoPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWSantoDomingoPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdSantoDomingoPivot2_2019 - lFirstTitleIdSantoDomingoPivot2_2019) % (lTotalTitlesSantoDomingoPivot2_2019) == 0)
                        {
                            lTitleIdSantoDomingoPivot2_2019 = lFirstTitleIdSantoDomingoPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region Cecchini
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Cecchini)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_Cecchini_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_Cecchini_2019;

                    Console.Write(" Cecchini | ");

                    #region Cecchini Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmCecchini
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotCecchini1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilCecchini1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotCecchini1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_CecchiniPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_CecchiniPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_CecchiniPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_CecchiniPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Cecchini Pivot1 2019
                    var lCIWCecchiniPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherCecchiniPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWCecchiniPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWCecchiniPivot1_2019.HydricBalance = lCIWCecchiniPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWCecchiniPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWCecchiniPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWCecchiniPivot1_2019.Titles)
                    {
                        var lTitlesCecchiniPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWCecchiniPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWCecchiniPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesCecchiniPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdCecchiniPivot1_2019 = (from title in context.Titles
                                                             where title.Name == "DDS"
                                                                && title.Daily == false
                                                                && title.CropIrrigationWeatherId == lCIWCecchiniPivot1_2019.CropIrrigationWeatherId
                                                             select title.TitleId).FirstOrDefault();
                    long lTotalTitlesCecchiniPivot1_2019 = lCIWCecchiniPivot1_2019.Titles.Count();
                    long lTitleIdCecchiniPivot1_2019 = lFirstTitleIdCecchiniPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWCecchiniPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdCecchiniPivot1_2019;
                        lTitleIdCecchiniPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWCecchiniPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdCecchiniPivot1_2019 - lFirstTitleIdCecchiniPivot1_2019) % (lTotalTitlesCecchiniPivot1_2019) == 0)
                        {
                            lTitleIdCecchiniPivot1_2019 = lFirstTitleIdCecchiniPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region Cecchini Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmCecchini
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotCecchini2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotCecchini2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotCecchini2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_CecchiniPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_CecchiniPivot2_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_CecchiniPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_CecchiniPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW Cecchini Pivot 2 2019
                    var lCIWCecchiniPivot2_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherCecchiniPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWCecchiniPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWCecchiniPivot2_2019.HydricBalance = lCIWCecchiniPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWCecchiniPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWCecchiniPivot2_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWCecchiniPivot2_2019.Titles)
                    {
                        var lTitlesCecchiniPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWCecchiniPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWCecchiniPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesCecchiniPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdCecchiniPivot2_2019 = (from title in context.Titles
                                                             where title.Name == "DDS"
                                                                && title.Daily == false
                                                                && title.CropIrrigationWeatherId == lCIWCecchiniPivot2_2019.CropIrrigationWeatherId
                                                             select title.TitleId).FirstOrDefault();
                    long lTotalTitlesCecchiniPivot2_2019 = lCIWCecchiniPivot2_2019.Titles.Count();
                    long lTitleIdCecchiniPivot2_2019 = lFirstTitleIdCecchiniPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWCecchiniPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdCecchiniPivot2_2019;
                        lTitleIdCecchiniPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWCecchiniPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdCecchiniPivot2_2019 - lFirstTitleIdCecchiniPivot2_2019) % (lTotalTitlesCecchiniPivot2_2019) == 0)
                        {
                            lTitleIdCecchiniPivot2_2019 = lFirstTitleIdCecchiniPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region El Alba
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElAlba)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_ElAlba_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_ElAlba_2019;

                    Console.Write(" El Alba | ");

                    #region El Alba Pivot 32 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElAlba
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElAlba32
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilElAlba32
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElAlba32)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElAlbaPivot32_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElAlbaPivot32_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot32_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot32_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Alba Pivot32 2019
                    var lCIWElAlbaPivot32_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElAlbaPivot32_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElAlbaPivot32_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElAlbaPivot32_2019.HydricBalance = lCIWElAlbaPivot32_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElAlbaPivot32_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElAlbaPivot32_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElAlbaPivot32_2019.Titles)
                    {
                        var lTitlesElAlbaPivot32_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElAlbaPivot32_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElAlbaPivot32_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElAlbaPivot32_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElAlbaPivot32_2019 = (from title in context.Titles
                                                            where title.Name == "DDS"
                                                               && title.Daily == false
                                                               && title.CropIrrigationWeatherId == lCIWElAlbaPivot32_2019.CropIrrigationWeatherId
                                                            select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElAlbaPivot32_2019 = lCIWElAlbaPivot32_2019.Titles.Count();
                    long lTitleIdElAlbaPivot32_2019 = lFirstTitleIdElAlbaPivot32_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElAlbaPivot32_2019.Messages)
                    {
                        item.TitleId = lTitleIdElAlbaPivot32_2019;
                        lTitleIdElAlbaPivot32_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElAlbaPivot32_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElAlbaPivot32_2019 - lFirstTitleIdElAlbaPivot32_2019) % (lTotalTitlesElAlbaPivot32_2019) == 0)
                        {
                            lTitleIdElAlbaPivot32_2019 = lFirstTitleIdElAlbaPivot32_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Alba Pivot 33 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElAlba
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElAlba33
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotElAlba33
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElAlba33)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElAlbaPivot33_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElAlbaPivot33_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot33_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot33_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Alba Pivot 33 2019
                    var lCIWElAlbaPivot33_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElAlbaPivot33_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElAlbaPivot33_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElAlbaPivot33_2019.HydricBalance = lCIWElAlbaPivot33_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElAlbaPivot33_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElAlbaPivot33_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElAlbaPivot33_2019.Titles)
                    {
                        var lTitlesElAlbaPivot33_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElAlbaPivot33_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElAlbaPivot33_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElAlbaPivot33_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElAlbaPivot33_2019 = (from title in context.Titles
                                                            where title.Name == "DDS"
                                                               && title.Daily == false
                                                               && title.CropIrrigationWeatherId == lCIWElAlbaPivot33_2019.CropIrrigationWeatherId
                                                            select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElAlbaPivot33_2019 = lCIWElAlbaPivot33_2019.Titles.Count();
                    long lTitleIdElAlbaPivot33_2019 = lFirstTitleIdElAlbaPivot33_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElAlbaPivot33_2019.Messages)
                    {
                        item.TitleId = lTitleIdElAlbaPivot33_2019;
                        lTitleIdElAlbaPivot33_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElAlbaPivot33_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElAlbaPivot33_2019 - lFirstTitleIdElAlbaPivot33_2019) % (lTotalTitlesElAlbaPivot33_2019) == 0)
                        {
                            lTitleIdElAlbaPivot33_2019 = lFirstTitleIdElAlbaPivot33_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Alba Pivot 38 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElAlba
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElAlba38
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilElAlba38
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElAlba38)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElAlbaPivot38_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElAlbaPivot38_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot38_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot38_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Alba Pivot38 2019
                    var lCIWElAlbaPivot38_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElAlbaPivot38_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElAlbaPivot38_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElAlbaPivot38_2019.HydricBalance = lCIWElAlbaPivot38_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElAlbaPivot38_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElAlbaPivot38_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElAlbaPivot38_2019.Titles)
                    {
                        var lTitlesElAlbaPivot38_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElAlbaPivot38_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElAlbaPivot38_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElAlbaPivot38_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElAlbaPivot38_2019 = (from title in context.Titles
                                                            where title.Name == "DDS"
                                                               && title.Daily == false
                                                               && title.CropIrrigationWeatherId == lCIWElAlbaPivot38_2019.CropIrrigationWeatherId
                                                            select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElAlbaPivot38_2019 = lCIWElAlbaPivot38_2019.Titles.Count();
                    long lTitleIdElAlbaPivot38_2019 = lFirstTitleIdElAlbaPivot38_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElAlbaPivot38_2019.Messages)
                    {
                        item.TitleId = lTitleIdElAlbaPivot38_2019;
                        lTitleIdElAlbaPivot38_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElAlbaPivot38_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElAlbaPivot38_2019 - lFirstTitleIdElAlbaPivot38_2019) % (lTotalTitlesElAlbaPivot38_2019) == 0)
                        {
                            lTitleIdElAlbaPivot38_2019 = lFirstTitleIdElAlbaPivot38_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region El Alba Pivot 40 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmElAlba
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieCornSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieCornSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieCornSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieCornSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotElAlba40
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotElAlba40
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotElAlba40)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_CornSouth_ElAlbaPivot40_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_CornSouth_ElAlbaPivot40_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot40_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_ElAlbaPivot40_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW El Alba Pivot 40 2019
                    var lCIWElAlbaPivot40_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherElAlbaPivot40_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWElAlbaPivot40_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWElAlbaPivot40_2019.HydricBalance = lCIWElAlbaPivot40_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWElAlbaPivot40_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWElAlbaPivot40_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWElAlbaPivot40_2019.Titles)
                    {
                        var lTitlesElAlbaPivot40_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWElAlbaPivot40_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWElAlbaPivot40_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesElAlbaPivot40_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdElAlbaPivot40_2019 = (from title in context.Titles
                                                            where title.Name == "DDS"
                                                               && title.Daily == false
                                                               && title.CropIrrigationWeatherId == lCIWElAlbaPivot40_2019.CropIrrigationWeatherId
                                                            select title.TitleId).FirstOrDefault();
                    long lTotalTitlesElAlbaPivot40_2019 = lCIWElAlbaPivot40_2019.Titles.Count();
                    long lTitleIdElAlbaPivot40_2019 = lFirstTitleIdElAlbaPivot40_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWElAlbaPivot40_2019.Messages)
                    {
                        item.TitleId = lTitleIdElAlbaPivot40_2019;
                        lTitleIdElAlbaPivot40_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWElAlbaPivot40_2019.CropIrrigationWeatherId;
                        if ((lTitleIdElAlbaPivot40_2019 - lFirstTitleIdElAlbaPivot40_2019) % (lTotalTitlesElAlbaPivot40_2019) == 0)
                        {
                            lTitleIdElAlbaPivot40_2019 = lFirstTitleIdElAlbaPivot40_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#if true
#endif
                }
                #endregion
                #region La Zenaida
                if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                    || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaZenaida)
                {
                    lWeatherStationMainName = DataEntry2019.WeatherStationMainName_LaZenaida_2019;
                    lWeatherStationAlternativeName = DataEntry2019.WeatherStationAlternativeName_LaZenaida_2019;

                    Console.Write(" La Zenaida | ");

                    #region La Zenaida Pivot 1 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieFescueForageSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieFescueForageSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieFescueForageSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida1
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLaZenaida1
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida1)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_FescueForageSouth_LaZenaidaPivot1_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_FescueForageSouth_LaZenaidaPivot1_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot1_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot1_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot1 2019
                    var lCIWLaZenaidaPivot1_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot1_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot1_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot1_2019.HydricBalance = lCIWLaZenaidaPivot1_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot1_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot1_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot1_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot1_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot1_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot1_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot1_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot1_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot1_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot1_2019 = lCIWLaZenaidaPivot1_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot1_2019 = lFirstTitleIdLaZenaidaPivot1_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot1_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot1_2019;
                        lTitleIdLaZenaidaPivot1_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot1_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot1_2019 - lFirstTitleIdLaZenaidaPivot1_2019) % (lTotalTitlesLaZenaidaPivot1_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot1_2019 = lFirstTitleIdLaZenaidaPivot1_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 2 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieFescueForageSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieFescueForageSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieFescueForageSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida2
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLaZenaida2
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida2)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_FescueForageSouth_LaZenaidaPivot2_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_FescueForageSouth_LaZenaidaPivot2_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot2_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot2_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot2 2019
                    var lCIWLaZenaidaPivot2_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot2_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot2_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot2_2019.HydricBalance = lCIWLaZenaidaPivot2_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot2_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot2_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot2_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot2_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot2_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot2_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot2_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot2_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot2_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot2_2019 = lCIWLaZenaidaPivot2_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot2_2019 = lFirstTitleIdLaZenaidaPivot2_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot2_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot2_2019;
                        lTitleIdLaZenaidaPivot2_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot2_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot2_2019 - lFirstTitleIdLaZenaidaPivot2_2019) % (lTotalTitlesLaZenaidaPivot2_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot2_2019 = lFirstTitleIdLaZenaidaPivot2_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 3 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieFescueForageSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieFescueForageSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieFescueForageSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieFescueForageSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida3
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLaZenaida3
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida3)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_FescueForageSouth_LaZenaidaPivot3_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_FescueForageSouth_LaZenaidaPivot3_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot3_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot3_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot3 2019
                    var lCIWLaZenaidaPivot3_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot3_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot3_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot3_2019.HydricBalance = lCIWLaZenaidaPivot3_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot3_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot3_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot3_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot3_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot3_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot3_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot3_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot3_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot3_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot3_2019 = lCIWLaZenaidaPivot3_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot3_2019 = lFirstTitleIdLaZenaidaPivot3_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot3_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot3_2019;
                        lTitleIdLaZenaidaPivot3_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot3_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot3_2019 - lFirstTitleIdLaZenaidaPivot3_2019) % (lTotalTitlesLaZenaidaPivot3_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot3_2019 = lFirstTitleIdLaZenaidaPivot3_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 4 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSudanGrassSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSudanGrassSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaZenaida4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SudanGrassSouth_LaZenaidaPivot4_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SudanGrassSouth_LaZenaidaPivot4_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot4_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot4_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot 4 2019
                    var lCIWLaZenaidaPivot4_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot4_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot4_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot4_2019.HydricBalance = lCIWLaZenaidaPivot4_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot4_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot4_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot4_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot4_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot4_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot4_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot4_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot4_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot4_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot4_2019 = lCIWLaZenaidaPivot4_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot4_2019 = lFirstTitleIdLaZenaidaPivot4_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot4_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot4_2019;
                        lTitleIdLaZenaidaPivot4_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot4_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot4_2019 - lFirstTitleIdLaZenaidaPivot4_2019) % (lTotalTitlesLaZenaidaPivot4_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot4_2019 = lFirstTitleIdLaZenaidaPivot4_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 5 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieSudanGrassSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieSudanGrassSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieSudanGrassSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieSudanGrassSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaZenaida5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_SudanGrassSouth_LaZenaidaPivot5_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_SudanGrassSouth_LaZenaidaPivot5_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot5_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot5_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot 5 2019
                    var lCIWLaZenaidaPivot5_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot5_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot5_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot5_2019.HydricBalance = lCIWLaZenaidaPivot5_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot5_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot5_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot5_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot5_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot5_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot5_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot5_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot5_2019 = (from title in context.Titles
                                                              where title.Name == "DDS"
                                                                 && title.Daily == false
                                                                 && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot5_2019.CropIrrigationWeatherId
                                                              select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot5_2019 = lCIWLaZenaidaPivot5_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot5_2019 = lFirstTitleIdLaZenaidaPivot5_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot5_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot5_2019;
                        lTitleIdLaZenaidaPivot5_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot5_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot5_2019 - lFirstTitleIdLaZenaidaPivot5_2019) % (lTotalTitlesLaZenaidaPivot5_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot5_2019 = lFirstTitleIdLaZenaidaPivot5_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
#if false
                    #region La Zenaida Pivot 1a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpecieOatSouthMedium
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieOatSouthMedium
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpecieOatSouthMedium
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpecieOatSouthMedium
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpecieOatSouthMedium
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida1a
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NameSoilLaZenaida1a
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida1a)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_OatSouth_LaZenaidaPivot1a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_OatSouth_LaZenaidaPivot1a_2019;
                    lCropDate = DateTime.Now;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot1a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot1a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot1a 2019
                    var lCIWLaZenaidaPivot1a_2019 = new CropIrrigationWeather
                    {

                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot1a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,
                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,
                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot1a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot1a_2019.HydricBalance = lCIWLaZenaidaPivot1a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot1a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot1a_2019);
                    context.SaveChanges();

                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot1a_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot1a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot1a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot1a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot1a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot1a_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot1a_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot1a_2019 = lCIWLaZenaidaPivot1a_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot1a_2019 = lFirstTitleIdLaZenaidaPivot1a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot1a_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot1a_2019;
                        lTitleIdLaZenaidaPivot1a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot1a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot1a_2019 - lFirstTitleIdLaZenaidaPivot1a_2019) % (lTotalTitlesLaZenaidaPivot1a_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot1a_2019 = lFirstTitleIdLaZenaidaPivot1a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 4a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpeciePastureSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpeciePastureSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpeciePastureSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpeciePastureSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpeciePastureSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida4
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaZenaida4
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida4)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_PastureSouth_LaZenaidaPivot4a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_PastureSouth_LaZenaidaPivot4a_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot4a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot4a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot 4 2019
                    var lCIWLaZenaidaPivot4a_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot4a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot4a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot4a_2019.HydricBalance = lCIWLaZenaidaPivot4a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot4a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot4a_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot4a_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot4a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot4a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot4a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot4a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot4a_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot4a_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot4a_2019 = lCIWLaZenaidaPivot4a_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot4a_2019 = lFirstTitleIdLaZenaidaPivot4a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot4a_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot4a_2019;
                        lTitleIdLaZenaidaPivot4a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot4a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot4a_2019 - lFirstTitleIdLaZenaidaPivot4a_2019) % (lTotalTitlesLaZenaidaPivot4a_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot4a_2019 = lFirstTitleIdLaZenaidaPivot4a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion
                    #region La Zenaida Pivot 5a 2019
                    #region Farm //////////////////////////////////////////////////////////////////////
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmLaZenaida
                             select farm).FirstOrDefault();
                    lWeatherStationMain = (from ws in context.WeatherStations
                                           where ws.Name == lWeatherStationMainName
                                           select ws).FirstOrDefault();
                    lWeatherStationAlternative = (from ws in context.WeatherStations
                                                  where ws.Name == lWeatherStationAlternativeName
                                                  select ws).FirstOrDefault();
                    lEffectiveRainList = (from effectiverain in context.EffectiveRains
                                          where effectiverain.Name.StartsWith(Utils.NameRegionSouth)
                                          select effectiverain)
                                         .ToList<EffectiveRain>();
                    #endregion
                    #region Crop //////////////////////////////////////////////////////////////////////
                    lSpecie = (from sp in context.Species
                               where sp.Name == Utils.NameSpeciePastureSouthShort
                               select sp).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpeciePastureSouthShort
                             select crop).FirstOrDefault();
                    lCropCoefficient = (from cc in context.CropCoefficients
                                        where cc.Name == Utils.NameSpeciePastureSouthShort
                                        select cc).FirstOrDefault();
                    lPhenologicalStages = (from ps in context.PhenologicalStages
                                           where ps.SpecieId == lSpecie.SpecieId
                                           select ps).ToList<PhenologicalStage>();
                    lKCList = (from cc in context.CropCoefficients
                               where cc.Name == Utils.NameSpeciePastureSouthShort
                               select cc.KCList)
                                         .FirstOrDefault();
                    lCropInformationByDate = (from cid in context.CropInformationByDates
                                              where cid.Name == Utils.NameSpeciePastureSouthShort
                                              select cid).FirstOrDefault();
                    #endregion
                    #region Agriculture //////////////////////////////////////////////////////////////////////
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotLaZenaida5
                                       select iu).FirstOrDefault();
                    lSoil = (from soil in context.Soils
                             where soil.Name == Utils.NamePivotLaZenaida5
                             select soil).FirstOrDefault();
                    lHorizonList = (from horizon in context.Horizons
                                    where horizon.Name.StartsWith(Utils.NamePivotLaZenaida5)
                                    select horizon)
                                    .ToList<Horizon>();
                    lSowingDate = DataEntry2019.SowingDate_PastureSouth_LaZenaidaPivot5a_2019;
                    lHarvestDate = DataEntry2019.HarvestDate_PastureSouth_LaZenaidaPivot5a_2019;
                    lCropDate = Program.DateOfReference;
                    if (DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot5a_2019 == 0)
                    {
                        lPredeterminatedIrrigationQuantity = Utils.PredeterminatedIrrigationQuantity_FirstPart;
                    }
                    else
                    {
                        lPredeterminatedIrrigationQuantity = DataEntry2019.PredeterminatedIrrigationQuantity_LaZenaidaPivot5a_2019;
                    }
                    #endregion
                    #region Weather Data
                    lMainWeatherDataList = (from weatherdata in context.WeatherDatas
                                            join weatherstation in context.WeatherStations
                                            on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                            where (weatherdata.Date >= lSowingDate &&
                                                    weatherdata.Date <= lHarvestDate) &&
                                                    weatherstation.WeatherStationId == lWeatherStationMain.WeatherStationId
                                            select weatherdata).ToList<WeatherData>();
                    lAlternativeWeatherDataList = (from weatherdata in context.WeatherDatas
                                                   join weatherstation in context.WeatherStations
                                                   on weatherdata.WeatherStationId equals weatherstation.WeatherStationId
                                                   where (weatherdata.Date >= lSowingDate &&
                                                        weatherdata.Date <= lHarvestDate) &&
                                                        weatherstation.WeatherStationId == lWeatherStationAlternative.WeatherStationId
                                                   select weatherdata).ToList<WeatherData>();
                    #endregion
                    #region New CIW La Zenaida Pivot 5 2019
                    var lCIWLaZenaidaPivot5a_2019 = new CropIrrigationWeather
                    {
                        CropIrrigationWeatherName = Utils.NameCropIrrigationWeatherLaZenaidaPivot5a_S1920,
                        CropId = lCrop.CropId,
                        Crop = lCrop,
                        IrrigationUnitId = lIrrigationUnit.IrrigationUnitId,
                        IrrigationUnit = lIrrigationUnit,

                        MainWeatherStationId = lWeatherStationMain.WeatherStationId,
                        MainWeatherStation = lWeatherStationMain,

                        WeatherEventType = Utils.WeatherEventType.LaNinia,

                        AlternativeWeatherStationId = lWeatherStationAlternative.WeatherStationId,
                        AlternativeWeatherStation = lWeatherStationAlternative,

                        PositionId = lFarm.PositionId,
                        SoilId = lSoil.SoilId,
                        Soil = lSoil,

                        MaxIrrigationQuantity = Math.Max(Utils.PredeterminatedIrrigationQuantity_FirstPart,
                                                 Math.Max(Utils.PredeterminatedIrrigationQuantity_SecondPart,
                                                          Utils.PredeterminatedIrrigationQuantity_ThirdPart)),
                        AdjustableIrrigationQuantity = true,
                        PredeterminatedIrrigationQuantity = lPredeterminatedIrrigationQuantity,

                        //Set the initial Phenological Stage for the Crop
                        PhenologicalStageId = lCrop.PhenologicalStageList[0].PhenologicalStageId,
                        PhenologicalStage = lCrop.PhenologicalStageList[0],

                        SowingDate = lSowingDate,
                        HarvestDate = lHarvestDate,
                        CropDate = lCropDate,
                        DaysForHydricBalanceUnchangableAfterSowing = 0,

                        HydricBalance = 0,

                        CropInformationByDateId = lCropInformationByDate.CropInformationByDateId,
                        CropInformationByDate = lCropInformationByDate,

                    };
                    context.SaveChanges();

                    //Set Calculus Method for Phenological Adjustment
                    lCIWLaZenaidaPivot5a_2019.SetCalculusMethodForPhenologicalAdjustment(Utils.CalculusOfPhenologicalStage.ByGrowingDegreeDays);
                    //Get Initial Hydric Balance
                    lCIWLaZenaidaPivot5a_2019.HydricBalance = lCIWLaZenaidaPivot5a_2019.GetInitialHydricBalance();
                    //Create the initial registry
                    lCIWLaZenaidaPivot5a_2019.AddDailyRecordToList(lSowingDate, "Initial registry", lSowingDate);

                    context.CropIrrigationWeathers.Add(lCIWLaZenaidaPivot5a_2019);
                    context.SaveChanges();
                    #endregion
                    #region Save Titles for print
                    foreach (var item in lCIWLaZenaidaPivot5a_2019.Titles)
                    {
                        var lTitlesLaZenaidaPivot5a_2019 = new Title
                        {
                            CropIrrigationWeatherId = lCIWLaZenaidaPivot5a_2019.CropIrrigationWeatherId,
                            CropIrrigationWeather = lCIWLaZenaidaPivot5a_2019,
                            Daily = false,
                            Name = item.Name,
                            Abbreviation = item.Abbreviation,
                            Description = item.Description,
                        };
                        context.Titles.Add(lTitlesLaZenaidaPivot5a_2019);
                    }
                    context.SaveChanges();
                    long lFirstTitleIdLaZenaidaPivot5a_2019 = (from title in context.Titles
                                                               where title.Name == "DDS"
                                                                  && title.Daily == false
                                                                  && title.CropIrrigationWeatherId == lCIWLaZenaidaPivot5a_2019.CropIrrigationWeatherId
                                                               select title.TitleId).FirstOrDefault();
                    long lTotalTitlesLaZenaidaPivot5a_2019 = lCIWLaZenaidaPivot5a_2019.Titles.Count();
                    long lTitleIdLaZenaidaPivot5a_2019 = lFirstTitleIdLaZenaidaPivot5a_2019;
                    #endregion
                    #region Update Messages Ids
                    foreach (var item in lCIWLaZenaidaPivot5a_2019.Messages)
                    {
                        item.TitleId = lTitleIdLaZenaidaPivot5a_2019;
                        lTitleIdLaZenaidaPivot5a_2019 += 1;
                        item.CropIrrigationWeatherId = lCIWLaZenaidaPivot5a_2019.CropIrrigationWeatherId;
                        if ((lTitleIdLaZenaidaPivot5a_2019 - lFirstTitleIdLaZenaidaPivot5a_2019) % (lTotalTitlesLaZenaidaPivot5a_2019) == 0)
                        {
                            lTitleIdLaZenaidaPivot5a_2019 = lFirstTitleIdLaZenaidaPivot5a_2019;
                        }
                    }
                    context.SaveChanges();
                    #endregion
                    #endregion

#endif
                }
                #endregion
                #region New Farm

                #region Farm Pivot # 2019

                #endregion

                #endregion

            }
        }

        /// <summary>
        /// Add PhenologicalStage Adjustments:
        ///     - DataEntry Add PhenologicalStage Adjustements Farm Pivot Year
        /// </summary>
        public static void AddPhenologicalStageAdjustements2019()
        {
            #region South

            #region Santa Lucia
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantaLucia)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region La Perdiz
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCALaPerdiz)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region Del Lago - San Pedro
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoSanPedro)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region Del Lago - El Mirador
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoElMirador)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region GMO - La Palma
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOLaPalma)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region GMO - El Tacuru
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOElTacuru)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #endregion

            #region North
            using (var context = new IrrigationAdvisorContext())
            {
                context.SaveChanges();
            }
            #endregion
        }

        /// <summary>
        /// Add HydricBalance Adjustments:
        ///     - DataEntry Add HydricBalance Adjustements Farm Pivot Year
        /// </summary>
        public static void AddHydricBalanceAdjustements2019()
        {
            #region Local Variable
            HydricBalanceAdjustment lHydricBalanceAdjustment;
            List<CropIrrigationWeather> lCropIrrigationWeatherList = new List<CropIrrigationWeather>();
            Farm lFarm = null;
            Crop lCrop = null;
            IrrigationUnit lIrrigationUnit;
            DateTime lDateOfChange;
            double lCurrentBalance;
            double lFieldCapacity;
            double lNewHydricBalance;
            double lPercentage;


            #endregion

            #region South

            #region Santa Lucia
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantaLucia)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region La Perdiz
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCALaPerdiz)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    #region DCA - La Perdiz Pivot 7 2019
                    #region context
                    lFarm = (from farm in context.Farms
                             where farm.Name == Utils.NameFarmDCALaPerdiz
                             select farm).FirstOrDefault();
                    lCrop = (from crop in context.Crops
                             where crop.Name == Utils.NameSpecieCornSouthShort
                             select crop).FirstOrDefault();
                    lIrrigationUnit = (from iu in context.Pivots
                                       where iu.Name == Utils.NamePivotDCALaPerdiz7
                                       select iu).FirstOrDefault();
                    lCropIrrigationWeatherList = (from ciw in context.CropIrrigationWeathers
                                                  where ciw.CropId == lCrop.CropId
                                                      && ciw.IrrigationUnitId == lIrrigationUnit.IrrigationUnitId
                                                      && ciw.SowingDate <= Program.DateOfReference
                                                      && ciw.HarvestDate.Year >= Program.DateOfReference.Year
                                                  select ciw).ToList<CropIrrigationWeather>();
                    #endregion
                    #region HydricBalanceAdjustment 2019/10/12 25 mm
                    foreach (CropIrrigationWeather lCropIrrigationWeather in lCropIrrigationWeatherList)
                    {
                        lDateOfChange = new DateTime(2019, 10, 12);
                        lNewHydricBalance = 0;
                        lPercentage = 90.31;

                        lCurrentBalance = lCropIrrigationWeather.GetPercentageOfHydricBalance();
                        lFieldCapacity = lCropIrrigationWeather.GetSoilFieldCapacity();

                        lNewHydricBalance = (lPercentage * lFieldCapacity) / 100;

                        lHydricBalanceAdjustment = new HydricBalanceAdjustment()
                        {
                            CropIrrigationWeatherId = lCropIrrigationWeather.CropIrrigationWeatherId,
                            Date = lDateOfChange.Date,
                            HydricBalance = lNewHydricBalance,
                            Percentage = lPercentage,
                        };
                        context.HydricBalanceAdjustments.Add(lHydricBalanceAdjustment);
                    }
                    #endregion

                    #endregion
                    context.SaveChanges();
                }
            }
            #endregion

            #region Del Lago - San Pedro
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoSanPedro)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region Del Lago - El Mirador
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoElMirador)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region GMO - La Palma
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOLaPalma)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #region GMO - El Tacuru
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOElTacuru)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    context.SaveChanges();
                }
            }
            #endregion

            #endregion

            #region North
            using (var context = new IrrigationAdvisorContext())
            {
                context.SaveChanges();
            }
            #endregion
        }

        /// <summary>
        /// Add Information to Irrigation Units:
        ///     - DataEntry Add Information To Irrigation Units Farm Pivot Year
        /// </summary>
        public static void AddInformationToIrrigationUnits2019()
        {
            #region South

            #region DCA - El Paraiso
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCAElParaiso)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - DCA - El Paraiso");
                    //DataEntry2019.AddInformationToIrrigationUnitsDCAElParaisoPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCAElParaisoPivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCAElParaisoPivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCAElParaisoPivot4_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion
            #region DCA - La Perdiz
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCALaPerdiz)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - DCA - La Perdiz");
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot2_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot3_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot5_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot6_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot7_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot10a_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot10b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot14_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCALaPerdizPivot15_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion
            #region DCA - San Jose
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCA
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DCASanJose)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - DCA - San Jose");
                    DataEntry2019.AddInformationToIrrigationUnitsDCASanJosePivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCASanJosePivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCASanJosePivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDCASanJosePivot4_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Del Lago - San Pedro
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoSanPedro)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - Del Lago - San Pedro");
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot2_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot3_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot4_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot5_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot6_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot7_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot8_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot9_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot10_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot11_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot12_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot13_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot14_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot15_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot16_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoSanPedroPivot17_2019(context, Program.DateOfReference);

                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion
            #region Del Lago - El Mirador
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLago
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.DelLagoElMirador)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - Del Lago - El Mirador");
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot4_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot5_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot6_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot7_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot8_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot9_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot10_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot11_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot12_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot13_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot14_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot15_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivotChaja1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivotChaja2_2019(context, Program.DateOfReference);

                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot1b_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot2b_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot3b_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsDelLagoElMiradorPivot4b_2019(context, Program.DateOfReference);

                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Tres Marias
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.TresMarias)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Tres Marias");
                    DataEntry2019.AddInformationToIrrigationUnitsTresMariasPivot1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsTresMariasPivot2_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsTresMariasPivot3_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsTresMariasPivot4_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region El Rincon
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElRincon)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - El Rincon");
                    //DataEntry2019.AddInformationToIrrigationUnitsElRinconPivot1a_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElRinconPivot1b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElRinconPivot2a_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElRinconPivot2b_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region El Desafio
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElDesafio)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - El Desafio");
                    DataEntry2019.AddInformationToIrrigationUnitsElDesafioPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElDesafioPivot2_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Los Naranjales
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LosNaranjales)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Los Naranjales");
                    DataEntry2019.AddInformationToIrrigationUnitsLosNaranjalesPivot6aT3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLosNaranjalesPivot6bT3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLosNaranjalesPivot5aT5_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLosNaranjalesPivot5bT5_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Santa Emilia
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantaEmilia)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Santa Emilia");
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot2_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot3_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot4_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot5_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot6_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivot7_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsSantaEmiliaPivotZP_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Gran Molino
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GranMolino)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Gran Molino");
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot4_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot5_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot2b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGranMolinoPivot5b_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Cassarino - La Perdiz
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.CassarinoLaPerdiz)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Cassarino - La Perdiz");
                    DataEntry2019.AddInformationToIrrigationUnitsCassarinoLaPerdizPivot11_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsCassarinoLaPerdizPivot12_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsCassarinoLaPerdizPivot13_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Santo Domingo
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.SantoDomingo)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Santo Domingo");
                    DataEntry2019.AddInformationToIrrigationUnitsSantoDomingoPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsSantoDomingoPivot2_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region Cecchini
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Cecchini)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - Cecchini");
                    DataEntry2019.AddInformationToIrrigationUnitsCecchiniPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsCecchiniPivot2_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region El Alba
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.ElAlba)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - El Alba");
                    //DataEntry2019.AddInformationToIrrigationUnitsElAlbaPivot32_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsElAlbaPivot33_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElAlbaPivot38_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsElAlbaPivot40_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region La Zenaida
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaZenaida)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - La Zenaida");
                    //DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot2_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot4_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot5_2019(context, Program.DateOfReference);

                    //DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot1a_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot4a_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsLaZenaidaPivot5a_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #endregion

            #region North

            #region GMO - El Tacuru
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOElTacuru)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - GMO - El Tacuru");
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot1a_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot1b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot2a_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot2b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot3a_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot3b_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot4_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot5_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot6_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot7_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot8_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot9_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOElTacuruPivot10_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion
            #region GMO - La Palma
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMO
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.GMOLaPalma)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - GMO - La Palma");
                    DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot3_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot4_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot5_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot1_1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot2_1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot3_1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsGMOLaPalmaPivot4_1_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region La Rinconada
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                //|| Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaRinconada)
            {
                using (var context = new IrrigationAdvisorContext())
                {
                    Console.Write(" - La Rinconada");
                    //DataEntry2019.AddInformationToIrrigationUnitsLaRinconadaPivot1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaRinconadaPivot2_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaRinconadaPivot3_1_2019(context, Program.DateOfReference);
                    DataEntry2019.AddInformationToIrrigationUnitsLaRinconadaPivot13_1_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #region La Portuguesa
            if (Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.All
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Production
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.Season_2019_2020
                || Program.ProcessFarm == Utils.IrrigationAdvisorProcessFarm.LaPortuguesa)
            {
                using (var context = new IrrigationAdvisorContext())
                {

                    Console.Write(" - La Portuguesa ");
                    DataEntry2019.AddInformationToIrrigationUnitsLaPortuguesaPivot1_2019(context, Program.DateOfReference);
                    //DataEntry2019.AddInformationToIrrigationUnitsLaPortuguesaPivot2_2019(context, Program.DateOfReference);
                    context.SaveChanges();
                    Console.WriteLine(" - Completed.");
                }
            }
            #endregion

            #endregion
        }

#endif
        #endregion

    }
}
